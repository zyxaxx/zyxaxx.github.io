<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>笑笑</title>
  
  <subtitle>我永远喜欢笑笑</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-05-09T13:37:32.546Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>张祎鑫</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>A Comparison of Visual Evoked Potential (VEP)-Based Methods for the Low-Cost Emotiv EPOC Neuroheadset</title>
    <link href="http://example.com/2021/05/07/%E7%A1%95%E5%A3%AB%E8%AE%BA%E6%96%87-%E5%9F%BA%E4%BA%8E%E8%A7%86%E8%A7%89%E8%AF%B1%E5%8F%91%E7%94%B5%E4%BD%8D(VEP)%E7%9A%84%E4%BD%8E%E6%88%90%E6%9C%ACEmotiv%20EPOC%E7%A5%9E%E7%BB%8F%E8%80%B3%E6%9C%BA%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"/>
    <id>http://example.com/2021/05/07/%E7%A1%95%E5%A3%AB%E8%AE%BA%E6%96%87-%E5%9F%BA%E4%BA%8E%E8%A7%86%E8%A7%89%E8%AF%B1%E5%8F%91%E7%94%B5%E4%BD%8D(VEP)%E7%9A%84%E4%BD%8E%E6%88%90%E6%9C%ACEmotiv%20EPOC%E7%A5%9E%E7%BB%8F%E8%80%B3%E6%9C%BA%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/</id>
    <published>2021-05-07T01:38:20.907Z</published>
    <updated>2021-05-09T13:37:32.546Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><p>机器学习方法是脑-机接口研究中最流行的分类方法，线性判别分析(LDA)和支持向量机(SVMs)等线性分类器是最流行的算法[31]。</p><p>研究脑机接口分为两种</p><p>视觉诱发电位VEPs：T-VEP  SSVEP（f-VEP） c-VEP</p><h2 id="1-研究目标"><a href="#1-研究目标" class="headerlink" title="1. 研究目标"></a>1. 研究目标</h2><h3 id="研究问题1"><a href="#研究问题1" class="headerlink" title="研究问题1"></a>研究问题1</h3><p>哪些技术可以用来对脑电图数据中出现的视觉诱发电位进行分类？</p><p>为了能够比较技术，收集关于脑-机接口领域中现有视觉诱发电位技术的信息是必不可少的。</p><h3 id="研究问题2"><a href="#研究问题2" class="headerlink" title="研究问题2"></a>研究问题2</h3><p>系统如何比较基于视觉诱发电位的脑-机接口方法的实施和配置？</p><p>研究问题1旨在收集有关视觉诱发电位技术的理论信息，而研究问题2解决的是实际实施基于视觉诱发电位的系统的问题。基于视觉诱发电位的脑机接口通常由两部分组成；一部分向用户提供刺激，另一部分处理来自用户的脑电响应并输出预测的命令。这两个部分都需要研究。刺激计划可以通过多种方式进行配置，目标之一就是找到配置该计划的最佳方式。</p><h2 id="2-研究背景及问题陈述"><a href="#2-研究背景及问题陈述" class="headerlink" title="2. 研究背景及问题陈述"></a>2. 研究背景及问题陈述</h2><p>本文的结构遵循1.3节所述的双重研究方法。第二章向读者介绍理解后面章节所需的背景知识。本章介绍了脑电信号的分析、10-20系统、BCI的概念以及本文使用的Emotiv  EPOC耳机。第二章的末尾描述了用于进行单反的结构化文献回顾方案。第三章介绍了通过SLR所发现的工作，并对核心理论和技术进行了说明。第四章是论文的实践部分，描述了所实现的视觉诱发电位系统，并说明了所做选择的合理性。在第五章中，描述了所做的实验和所获得的结果。最后，第六章对研究结果进行了评价，并对论文进行了整体评价。</p><h2 id="3-研究方法"><a href="#3-研究方法" class="headerlink" title="3. 研究方法"></a>3. 研究方法</h2><p>本文采用的研究方法是理论研究和设计/实验相结合。在实施任何方法之前，进行了结构化的文献回顾(SLR)。SLR的目的是找到关于在该领域内已经做了什么的信息，基于视觉诱发电位的脑梗死有哪些不同的方法，以及刺激系统是如何实施的。设计/实验阶段实现了一个完整的基于视觉诱发电位的脑机接口，包括多种视觉诱发电位技术和视觉刺激器。然后，在多个测试对象上测试不同的VEP技术，以评估哪些技术在Emotiv  EPOC上效果最好。</p><p>设计/实验阶段实现了一个完整的基于视觉诱发电位的脑机接口，包括多种视觉诱发电位技术和视觉刺激器。然后，在多个测试对象上测试不同的VEP技术，以评估哪些技术在Emotiv  EPOC上效果最好。</p><h2 id="4-评估，实验"><a href="#4-评估，实验" class="headerlink" title="4. 评估，实验"></a>4. 评估，实验</h2><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><h2 id="6-笔记"><a href="#6-笔记" class="headerlink" title="6. 笔记"></a>6. 笔记</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
    <summary type="html">基于视觉诱发电位(VEP)的低成本Emotiv EPOC神经耳机检测方法比较</summary>
    
    
    
    <category term="论文" scheme="http://example.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="SSVEP" scheme="http://example.com/tags/SSVEP/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/04/23/%E5%9F%BA%E4%BA%8E%E8%A7%86%E8%A7%89%E8%AF%B1%E5%8F%91%E7%94%B5%E4%BD%8D(VEP)%E7%9A%84%E4%BD%8E%E6%88%90%E6%9C%ACEmotiv%20EPOC%E7%A5%9E%E7%BB%8F%E8%80%B3%E6%9C%BA%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/"/>
    <id>http://example.com/2021/04/23/%E5%9F%BA%E4%BA%8E%E8%A7%86%E8%A7%89%E8%AF%B1%E5%8F%91%E7%94%B5%E4%BD%8D(VEP)%E7%9A%84%E4%BD%8E%E6%88%90%E6%9C%ACEmotiv%20EPOC%E7%A5%9E%E7%BB%8F%E8%80%B3%E6%9C%BA%E6%A3%80%E6%B5%8B%E6%96%B9%E6%B3%95%E6%AF%94%E8%BE%83/</id>
    <published>2021-04-23T08:32:27.228Z</published>
    <updated>2021-04-20T02:30:17.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p><h2 id="1-研究目标"><a href="#1-研究目标" class="headerlink" title="1. 研究目标"></a>1. 研究目标</h2><p><img src="test/image-20210414120832812.png" alt="image-20210414120832812"></p><h2 id="2-研究背景及问题陈述"><a href="#2-研究背景及问题陈述" class="headerlink" title="2. 研究背景及问题陈述"></a>2. 研究背景及问题陈述</h2><h2 id="3-研究方法"><a href="#3-研究方法" class="headerlink" title="3. 研究方法"></a>3. 研究方法</h2><h2 id="4-评估，实验"><a href="#4-评估，实验" class="headerlink" title="4. 评估，实验"></a>4. 评估，实验</h2><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><h2 id="6-笔记"><a href="#6-笔记" class="headerlink" title="6. 笔记"></a>6. 笔记</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-总结&quot;&gt;&lt;a href=&quot;#0-总结&quot; class=&quot;headerlink&quot; title=&quot;0. 总结&quot;&gt;&lt;/a&gt;0. 总结&lt;/h2&gt;&lt;p&gt;写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己</summary>
      
    
    
    
    <category term="论文" scheme="http://example.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>第三十四课：异常处理：丰富的else语句和简洁的with语句</title>
    <link href="http://example.com/2021/04/23/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A%E4%B8%B0%E5%AF%8C%E7%9A%84else%E8%AF%AD%E5%8F%A5%E5%92%8C%E7%AE%80%E6%B4%81%E7%9A%84with%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2021/04/23/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E5%9B%9B%E8%AF%BE%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A%E4%B8%B0%E5%AF%8C%E7%9A%84else%E8%AF%AD%E5%8F%A5%E5%92%8C%E7%AE%80%E6%B4%81%E7%9A%84with%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-04-23T05:34:11.949Z</published>
    <updated>2021-04-23T09:35:11.456Z</updated>
    
    <content type="html"><![CDATA[<p>练习题（来自小甲鱼官方论坛）</p><h1 id="0-在-Python中，else语句能跟哪些语句进行搭配？"><a href="#0-在-Python中，else语句能跟哪些语句进行搭配？" class="headerlink" title="0.在 Python中，else语句能跟哪些语句进行搭配？"></a>0.在 Python中，else语句能跟哪些语句进行搭配？</h1><p>答：在Python中，else语句不仅能跟if语句搭配，构成“要么怎样，要么不怎么样”的语境；Ta还能跟循环语句（for语句或者while语句），构成“干完了能怎样，不干完就别想怎样”的语境；其实else语句还能够跟我们刚刚讲的异常处理进行搭配，构成“没有问题，那就干吧”的语境。</p><hr><h1 id="1-请问以下例子中，循环中的-break语句会跳过-else语句吗？"><a href="#1-请问以下例子中，循环中的-break语句会跳过-else语句吗？" class="headerlink" title="1.请问以下例子中，循环中的 break语句会跳过 else语句吗？"></a>1.请问以下例子中，循环中的 break语句会跳过 else语句吗？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">showMaxFactor</span>(<span class="params">num</span>):</span>  </span><br><span class="line">    count = num // <span class="number">2</span>  </span><br><span class="line">    <span class="keyword">while</span> count &gt; <span class="number">1</span>:  </span><br><span class="line">        <span class="keyword">if</span> num % count == <span class="number">0</span>:  </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%d最大的约数是%d&#x27;</span>%(num,count))  </span><br><span class="line">            <span class="keyword">break</span>  </span><br><span class="line">        count -= <span class="number">1</span>  </span><br><span class="line">    <span class="keyword">else</span>:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;%d是素数！&#x27;</span>%num)  </span><br><span class="line"> </span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入一个数：&#x27;</span>))  </span><br><span class="line">showMaxFactor(num)</span><br></pre></td></tr></table></figure><p>答：会，因为如果将else语句与循环语句（while和for语句）进行搭配，那么只有在循环正常执行完成后才会执行else语句。</p><h1 id="2-请目测以下代码会打印什么内容？"><a href="#2-请目测以下代码会打印什么内容？" class="headerlink" title="2.请目测以下代码会打印什么内容？"></a>2.请目测以下代码会打印什么内容？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;ABC&#x27;</span>)  </span><br><span class="line"><span class="keyword">except</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;DEF&#x27;</span>)  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;GHI&#x27;</span>)  </span><br><span class="line"><span class="keyword">finally</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;JKL&#x27;</span>)  </span><br></pre></td></tr></table></figure><p>答：因为try语句块中并没有异常，则else语句块也会被执行，故只有except语句中的内容不被打印。</p><h1 id="3-使用什么语句可以使你不比再担心文件打开后却忘了关闭的尴尬？"><a href="#3-使用什么语句可以使你不比再担心文件打开后却忘了关闭的尴尬？" class="headerlink" title="3.使用什么语句可以使你不比再担心文件打开后却忘了关闭的尴尬？"></a>3.使用什么语句可以使你不比再担心文件打开后却忘了关闭的尴尬？</h1><p>答：使用with语句。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> each_line <span class="keyword">in</span> f:</span><br><span class="line">            <span class="built_in">print</span>(each_line)</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错啦：&#x27;</span> + <span class="built_in">str</span>(reason))</span><br></pre></td></tr></table></figure><h1 id="4-使用with语句固然方便，但如果出现异常的话，文件还会自动正常关闭吗？"><a href="#4-使用with语句固然方便，但如果出现异常的话，文件还会自动正常关闭吗？" class="headerlink" title="4.使用with语句固然方便，但如果出现异常的话，文件还会自动正常关闭吗？"></a>4.使用with语句固然方便，但如果出现异常的话，文件还会自动正常关闭吗？</h1><p>答：with语句会自动处理文件的打开和关闭，如果中途出现异常，会执行清理代码，然后确保文件自动关闭。</p><h1 id="5-你可以换一种形式写出下边的伪代码吗？"><a href="#5-你可以换一种形式写出下边的伪代码吗？" class="headerlink" title="5.你可以换一种形式写出下边的伪代码吗？"></a>5.你可以换一种形式写出下边的伪代码吗？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> a:</span><br><span class="line">    <span class="keyword">with</span> B() <span class="keyword">as</span> b:</span><br><span class="line">        suite</span><br></pre></td></tr></table></figure><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> A() <span class="keyword">as</span> a,B() <span class="keyword">as</span> b:  </span><br><span class="line">    suite</span><br></pre></td></tr></table></figure><h1 id="0-使用-with语句改写以下代码，让-Python去关心文件的打开与关闭吧。"><a href="#0-使用-with语句改写以下代码，让-Python去关心文件的打开与关闭吧。" class="headerlink" title="0.使用 with语句改写以下代码，让 Python去关心文件的打开与关闭吧。"></a>0.使用 with语句改写以下代码，让 Python去关心文件的打开与关闭吧。</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_compare</span>(<span class="params">file1,file2</span>):</span>  </span><br><span class="line">    f1 = <span class="built_in">open</span>(file1)  </span><br><span class="line">    f2 = <span class="built_in">open</span>(file2)  </span><br><span class="line">    count = <span class="number">0</span><span class="comment">#统计行数  </span></span><br><span class="line">    differ = []<span class="comment">#统计不一样的数量  </span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> line1 <span class="keyword">in</span> f1:  </span><br><span class="line">        line2 = f2.readline()  </span><br><span class="line">        count += <span class="number">1</span>  </span><br><span class="line">        <span class="keyword">if</span> line1 != line2:  </span><br><span class="line">            differ.append(count)  </span><br><span class="line"> </span><br><span class="line">    f1.close()  </span><br><span class="line">    f2.close()  </span><br><span class="line">    <span class="keyword">return</span> differ  </span><br><span class="line"> </span><br><span class="line">file1 = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要比较的头一个文件名：&#x27;</span>)  </span><br><span class="line">file2 = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要比较的另一个文件名：&#x27;</span>)  </span><br><span class="line"> </span><br><span class="line">differ = file_compare(file1,file2)  </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(differ) == <span class="number">0</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两个文件完全一样！&#x27;</span>)  </span><br><span class="line"><span class="keyword">else</span>:  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两个文件共有【%d】处不同：&#x27;</span>%<span class="built_in">len</span>(differ))  </span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> differ:  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第%d行不一样&#x27;</span>%each)  </span><br></pre></td></tr></table></figure><p>答：仅将file_compare()函数修改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_compare</span>(<span class="params">file1,file2</span>):</span>  </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file1) <span class="keyword">as</span> f1, <span class="built_in">open</span>(file2) <span class="keyword">as</span> f2:  </span><br><span class="line">        count = <span class="number">0</span><span class="comment">#统计行数  </span></span><br><span class="line">        differ = []<span class="comment">#统计不一样的数量  </span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> line1 <span class="keyword">in</span> f1:  </span><br><span class="line">            line2 = f2.readline()  </span><br><span class="line">            count += <span class="number">1</span>  </span><br><span class="line">            <span class="keyword">if</span> line1 != line2:  </span><br><span class="line">                differ.append(count)  </span><br><span class="line">    <span class="keyword">return</span> differ  </span><br></pre></td></tr></table></figure><h1 id="1-你可以利用异常的原理，修改下面的代码使得更高效率的实现吗？"><a href="#1-你可以利用异常的原理，修改下面的代码使得更高效率的实现吗？" class="headerlink" title="1.你可以利用异常的原理，修改下面的代码使得更高效率的实现吗？"></a>1.你可以利用异常的原理，修改下面的代码使得更高效率的实现吗？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 欢迎进入通讯录程序 ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 1：查询联系人资料  ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 2：插入新的联系人  ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 3：删除已有联系人  ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 4：退出通讯录程序  ---|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contacts = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    instr = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;\n请输入相关的指令代码：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">1</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> contacts:</span><br><span class="line">            <span class="built_in">print</span>(name + <span class="string">&#x27; : &#x27;</span> + contacts[name])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的姓名不再通讯录中！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">2</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> contacts:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的姓名在通讯录中已存在 --&gt;&gt; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(name + <span class="string">&#x27; : &#x27;</span> + contacts[name])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;是否修改用户资料（YES/NO）：&#x27;</span>) == <span class="string">&#x27;YES&#x27;</span>:</span><br><span class="line">                contacts[name] = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户联系电话：&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            contacts[name] = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户联系电话：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">3</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> contacts:</span><br><span class="line">            <span class="keyword">del</span>(contacts[name])         <span class="comment"># 也可以使用dict.pop()</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的联系人不存在。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 感谢使用通讯录程序 ---|&#x27;</span>)</span><br></pre></td></tr></table></figure><p>答：使用条件语句的代码非常直观明了，但是效率不高。因为程序会两次访问字典的键，一次判断是否存在（if name in contacts），一次获得值（例如：print(name + ‘ : ‘ + contacts[name]）。<br> 如果利用异常解决方案，我们可以简单避开每次需要使用in判断是否key存在字典中的操作。<br> 因为只要当key不存在字典中时，会触发KeyError异常，利用此特性我们可以修改代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 欢迎进入通讯录程序 ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 1：查询联系人资料  ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 2：插入新的联系人  ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 3：删除已有联系人  ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 4：退出通讯录程序  ---|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">contacts = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    instr = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;\n请输入相关的指令代码：&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">1</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(name + <span class="string">&#x27; : &#x27;</span> + contacts[name])</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的姓名不再通讯录中！&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">2</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            contacts[name] </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的姓名在通讯录中已存在 --&gt;&gt; &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(name + <span class="string">&#x27; : &#x27;</span> + contacts[name])</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;是否修改用户资料（YES/NO）：&#x27;</span>) == <span class="string">&#x27;YES&#x27;</span>:</span><br><span class="line">                contacts[name] = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户联系电话：&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            contacts[name] = <span class="built_in">input</span>(<span class="string">&#x27;请输入用户联系电话：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">3</span>:</span><br><span class="line">        name = <span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">del</span>(contacts[name]) <span class="comment"># 也可以使用dict.pop()</span></span><br><span class="line">        <span class="keyword">except</span> KeyError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的联系人不存在。&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> instr == <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 感谢使用通讯录程序 ---|&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;练习题（来自小甲鱼官方论坛）&lt;/p&gt;
&lt;h1 id=&quot;0-在-Python中，else语句能跟哪些语句进行搭配？&quot;&gt;&lt;a href=&quot;#0-在-Python中，else语句能跟哪些语句进行搭配？&quot; class=&quot;headerlink&quot; title=&quot;0.在 Python中，</summary>
      
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第三十三课：异常处理：try-except、try-finally、raise语句</title>
    <link href="http://example.com/2021/04/23/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9Atry-except%E3%80%81try-finally%E3%80%81raise%E8%AF%AD%E5%8F%A5/"/>
    <id>http://example.com/2021/04/23/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%89%E8%AF%BE%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9Atry-except%E3%80%81try-finally%E3%80%81raise%E8%AF%AD%E5%8F%A5/</id>
    <published>2021-04-23T02:31:29.931Z</published>
    <updated>2021-05-10T08:04:56.755Z</updated>
    
    <content type="html"><![CDATA[<p>练习题（来自小甲鱼官方论坛）</p><h1 id="0-我们使用什么方法来处理程序中出现的异常？"><a href="#0-我们使用什么方法来处理程序中出现的异常？" class="headerlink" title="0. 我们使用什么方法来处理程序中出现的异常？"></a>0. 我们使用什么方法来处理程序中出现的异常？</h1><p>答：使用 try……except 搭配来捕获处理程序中出现的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">        检测范围</span><br><span class="line"><span class="keyword">except</span> Exception[<span class="keyword">as</span> reason]:</span><br><span class="line">        出现异常（Exception）后的处理代码</span><br></pre></td></tr></table></figure><hr><h1 id="1-一个-try-语句可以和多个-except-语句搭配吗？为什么？"><a href="#1-一个-try-语句可以和多个-except-语句搭配吗？为什么？" class="headerlink" title="1. 一个 try 语句可以和多个 except 语句搭配吗？为什么？"></a>1. 一个 try 语句可以和多个 except 语句搭配吗？为什么？</h1><p>答：可以。因为 try 语句块中可能出现多类异常，利用多个 except 语句可以分别捕获并处理我们感兴趣的异常。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">1</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;我是一个不存在的文档.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件出错啦T_T\n错误原因是：&#x27;</span> + <span class="built_in">str</span>(reason))</span><br><span class="line"><span class="keyword">except</span> TypeError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;类型出错啦T_T\n错误原因是：&#x27;</span> + <span class="built_in">str</span>(reason))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">类型出错啦T_T</span><br><span class="line">错误原因是：unsupported operand <span class="built_in">type</span>(s) <span class="keyword">for</span> +: <span class="string">&#x27;int&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure><hr><h1 id="2-你知道如何统一处理多类异常吗？"><a href="#2-你知道如何统一处理多类异常吗？" class="headerlink" title="2. 你知道如何统一处理多类异常吗？"></a>2. 你知道如何统一处理多类异常吗？</h1><p>答：在 except 后边使用小括号“()”把多个需要统一处理的异常括起来：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="built_in">int</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line">    sum = <span class="number">1</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line">    f = open(<span class="string">&#x27;我是一个不存在的文档.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line">except (OSError, TypeError, ValueError) <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错啦T_T\n错误原因是：&#x27;</span> + str(reason))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">出错啦T_T</span><br><span class="line">错误原因是：invalid literal <span class="keyword">for</span> <span class="built_in">int</span>() <span class="keyword">with</span> base <span class="number">10</span>: <span class="string">&#x27;abc&#x27;</span></span><br></pre></td></tr></table></figure><hr><h1 id="3-except-后边如果不带任何异常类，Python-会捕获所有（try-语句块内）的异常并统一处理，但小甲鱼却不建议这么做，你知道为什么吗？"><a href="#3-except-后边如果不带任何异常类，Python-会捕获所有（try-语句块内）的异常并统一处理，但小甲鱼却不建议这么做，你知道为什么吗？" class="headerlink" title="3. except 后边如果不带任何异常类，Python 会捕获所有（try 语句块内）的异常并统一处理，但小甲鱼却不建议这么做，你知道为什么吗？"></a>3. except 后边如果不带任何异常类，Python 会捕获所有（try 语句块内）的异常并统一处理，但小甲鱼却不建议这么做，你知道为什么吗？</h1><p>答：因为它会隐藏所有程序员未想到并且未做好准备处理的错误，例如用户输入ctrl+c试图终止程序会被解释为KeyboardInterrupt异常。</p><hr><h1 id="4-如果异常发生在成功打开文件后，Python-跳到-except-语句执行，并没有执行关闭文件的命令（用户写入文件的数据就可能没有保存起来），因此我们需要确保无论如何（就算出了异常退出）文件也要被关闭，我们应该怎么做呢？"><a href="#4-如果异常发生在成功打开文件后，Python-跳到-except-语句执行，并没有执行关闭文件的命令（用户写入文件的数据就可能没有保存起来），因此我们需要确保无论如何（就算出了异常退出）文件也要被关闭，我们应该怎么做呢？" class="headerlink" title="4. 如果异常发生在成功打开文件后，Python 跳到 except 语句执行，并没有执行关闭文件的命令（用户写入文件的数据就可能没有保存起来），因此我们需要确保无论如何（就算出了异常退出）文件也要被关闭，我们应该怎么做呢？"></a>4. 如果异常发生在成功打开文件后，Python 跳到 except 语句执行，并没有执行关闭文件的命令（用户写入文件的数据就可能没有保存起来），因此我们需要确保无论如何（就算出了异常退出）文件也要被关闭，我们应该怎么做呢？</h1><p>答：我们可以使用 finally 语句来实现，如果 try 语句块中没有出现任何运行时错误，会跳过 except 语句块执行 finally语句块的内容。如果出现异常，则会先执行 except 语句块的内容再接着执行 finally 语句块的内容。总之，finally 语句块里的内容就是确保无论如何都将被执行的内容！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#举个例子：</span></span><br><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;a.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">1</span> + <span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错了&#x27;</span>)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">...这里是输出的是a.txt文件内容...</span><br><span class="line">出错了</span><br></pre></td></tr></table></figure><h1 id="5-请恢复以下代码中马赛克挡住的内容，使得程序执行后可以按要求输出。"><a href="#5-请恢复以下代码中马赛克挡住的内容，使得程序执行后可以按要求输出。" class="headerlink" title="5. 请恢复以下代码中马赛克挡住的内容，使得程序执行后可以按要求输出。"></a>5. 请恢复以下代码中马赛克挡住的内容，使得程序执行后可以按要求输出。</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210423103616.webp" alt="img"></p><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            <span class="keyword">if</span> i == <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">raise</span> KeyboardInterrupt</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;退出啦！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h1 id="0-还记得我们第一个小游戏吗？只要用户输入非整型数据，程序立刻就会蹦出不和谐的异常信息然后崩溃。请使用刚学的异常处理方法修改以下程序，提高用户体验。"><a href="#0-还记得我们第一个小游戏吗？只要用户输入非整型数据，程序立刻就会蹦出不和谐的异常信息然后崩溃。请使用刚学的异常处理方法修改以下程序，提高用户体验。" class="headerlink" title="0. 还记得我们第一个小游戏吗？只要用户输入非整型数据，程序立刻就会蹦出不和谐的异常信息然后崩溃。请使用刚学的异常处理方法修改以下程序，提高用户体验。)"></a>0. 还记得我们第一个小游戏吗？只要用户输入非整型数据，程序立刻就会蹦出不和谐的异常信息然后崩溃。请使用刚学的异常处理方法修改以下程序，提高用户体验。)</h1><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line">secret = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------我爱鱼C工作室------------------&#x27;</span>)</span><br><span class="line">temp = <span class="built_in">input</span>(<span class="string">&quot;不妨猜一下小甲鱼现在心里想的是哪个数字：&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:    </span><br><span class="line">    guess = <span class="built_in">int</span>(temp)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入错误！&#x27;</span>)</span><br><span class="line">    guess = secret</span><br><span class="line"><span class="keyword">while</span> guess != secret:</span><br><span class="line">    temp = <span class="built_in">input</span>(<span class="string">&quot;哎呀，猜错了，请重新输入吧：&quot;</span>)</span><br><span class="line">    guess = <span class="built_in">int</span>(temp)</span><br><span class="line">    <span class="keyword">if</span> guess == secret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我草，你是小甲鱼心里的蛔虫吗？！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;哼，猜中了也没有奖励！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> guess &gt; secret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;哥，大了大了~~~&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;嘿，小了，小了~~~&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩啦^_^&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="1-input-函数有可能产生两类异常：EOFError（文件末尾endoffile，当用户按下组合键-Ctrl-d-产生）和KeyboardInterrupt（取消输入，当用户按下组合键-Ctrl-c-产生），再次修改上边代码，捕获处理-input-的两类异常，提高用户体验。"><a href="#1-input-函数有可能产生两类异常：EOFError（文件末尾endoffile，当用户按下组合键-Ctrl-d-产生）和KeyboardInterrupt（取消输入，当用户按下组合键-Ctrl-c-产生），再次修改上边代码，捕获处理-input-的两类异常，提高用户体验。" class="headerlink" title="1. input() 函数有可能产生两类异常：EOFError（文件末尾endoffile，当用户按下组合键 Ctrl+d 产生）和KeyboardInterrupt（取消输入，当用户按下组合键 Ctrl+c 产生），再次修改上边代码，捕获处理 input() 的两类异常，提高用户体验。"></a>1. input() 函数有可能产生两类异常：EOFError（文件末尾endoffile，当用户按下组合键 Ctrl+d 产生）和KeyboardInterrupt（取消输入，当用户按下组合键 Ctrl+c 产生），再次修改上边代码，捕获处理 input() 的两类异常，提高用户体验。</h1><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"> </span><br><span class="line">secret = random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;------------------我爱鱼C工作室------------------&#x27;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    temp = <span class="built_in">input</span>(<span class="string">&quot;不妨猜一下小甲鱼现在心里想的是哪个数字：&quot;</span>)    </span><br><span class="line">    guess = <span class="built_in">int</span>(temp)</span><br><span class="line"><span class="keyword">except</span> (ValueError, EOFError, KeyboardInterrupt):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;输入错误！&#x27;</span>)</span><br><span class="line">    guess = secret</span><br><span class="line"><span class="keyword">while</span> guess != secret:</span><br><span class="line">    temp = <span class="built_in">input</span>(<span class="string">&quot;哎呀，猜错了，请重新输入吧：&quot;</span>)</span><br><span class="line">    guess = <span class="built_in">int</span>(temp)</span><br><span class="line">    <span class="keyword">if</span> guess == secret:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我草，你是小甲鱼心里的蛔虫吗？！&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;哼，猜中了也没有奖励！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> guess &gt; secret:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;哥，大了大了~~~&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;嘿，小了，小了~~~&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;游戏结束，不玩啦^_^&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="2-尝试一个新的函数-int-input-，当用户输入整数的时候正常返回，否则提示出错并要求重新输入。"><a href="#2-尝试一个新的函数-int-input-，当用户输入整数的时候正常返回，否则提示出错并要求重新输入。" class="headerlink" title="2. 尝试一个新的函数 int_input()，当用户输入整数的时候正常返回，否则提示出错并要求重新输入。"></a>2. 尝试一个新的函数 int_input()，当用户输入整数的时候正常返回，否则提示出错并要求重新输入。</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210423111524.webp" alt="img"></p><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">int_input</span>(<span class="params">prompt=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">int</span>(<span class="built_in">input</span>(prompt))</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;出错，您输入的不是整数！&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">int_input(<span class="string">&#x27;请输入一个整数：&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="3-把文件关闭放在-finally-语句块中执行还是会出现问题，像下边这个代码，当前文件夹中并不存在”My-File-txt”这个文件，那么程序执行起来会发生什么事情呢？你有办法解决这个问题吗？"><a href="#3-把文件关闭放在-finally-语句块中执行还是会出现问题，像下边这个代码，当前文件夹中并不存在”My-File-txt”这个文件，那么程序执行起来会发生什么事情呢？你有办法解决这个问题吗？" class="headerlink" title="3. 把文件关闭放在 finally 语句块中执行还是会出现问题，像下边这个代码，当前文件夹中并不存在”My_File.txt”这个文件，那么程序执行起来会发生什么事情呢？你有办法解决这个问题吗？"></a>3. 把文件关闭放在 finally 语句块中执行还是会出现问题，像下边这个代码，当前文件夹中并不存在”My_File.txt”这个文件，那么程序执行起来会发生什么事情呢？你有办法解决这个问题吗？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;My_File.txt&#x27;</span>) <span class="comment"># 当前文件夹中并不存在&quot;My_File.txt&quot;这个文件T_T</span></span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错啦：&#x27;</span> + <span class="built_in">str</span>(reason))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>答：由于finally语句块里试图去关闭一个并没有成功打开的文件，因此会弹出错误内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>出错啦：[Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;My_File.txt&#x27;</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;C:\Users\FishC000\Desktop\test.py&quot;</span>, line <span class="number">7</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    f.close()</span><br><span class="line">NameError: name <span class="string">&#x27;f&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br></pre></td></tr></table></figure><p>我们这么修正：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    f = <span class="built_in">open</span>(<span class="string">&#x27;My_File.txt&#x27;</span>) <span class="comment"># 当前文件夹中并不存在&quot;My_File.txt&quot;这个文件T_T</span></span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;出错啦：&#x27;</span> + <span class="built_in">str</span>(reason))</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;f&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>(): <span class="comment"># 如果文件对象变量存在当前局部变量符号表的话，说明打开成功</span></span><br><span class="line">        f.close()</span><br></pre></td></tr></table></figure><h1 id="4-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"><a href="#4-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！" class="headerlink" title="4.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"></a>4.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！</h1><ul><li>try语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span> Exception[<span class="keyword">as</span> reason]:</span><br><span class="line">    出现异常（Exception）后的处理代码</span><br></pre></td></tr></table></figure><p>举个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">try</span>:</span><br><span class="line">    f=<span class="built_in">open</span>(<span class="string">&#x27;woshinibab.txt&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> OSError <span class="keyword">as</span> reason:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;文件出错了\n错误原因是：&#x27;</span> + <span class="built_in">str</span>(reason))</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"></span><br><span class="line">文件出错了</span><br><span class="line">错误原因是：[Errno <span class="number">2</span>] No such file <span class="keyword">or</span> directory: <span class="string">&#x27;woshinibab.txt&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>try-finally语句：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    检测范围</span><br><span class="line"><span class="keyword">except</span> Exception[<span class="keyword">as</span> reason]:</span><br><span class="line">    出现异常（Exception）后的处理代码</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    无论如何都会被执行的代码&lt;/span&gt;</span><br></pre></td></tr></table></figure><ul><li>raise语句：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">raise</span> ZeroDivisionError(<span class="string">&#x27;除数为零的异常&#x27;</span>)</span><br><span class="line">&lt;span style=<span class="string">&quot;color:#ff0000;&quot;</span>&gt;Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#0&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">raise</span> ZeroDivisionError(<span class="string">&#x27;除数为零的异常&#x27;</span>)</span><br><span class="line">ZeroDivisionError: 除数为零的异常&lt;/span&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">三十三课课后练习题</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第三十二课：异常处理：你不可能总是对的</title>
    <link href="http://example.com/2021/04/23/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A%E4%BD%A0%E4%B8%8D%E5%8F%AF%E8%83%BD%E6%80%BB%E6%98%AF%E5%AF%B9%E7%9A%84/"/>
    <id>http://example.com/2021/04/23/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E4%BA%8C%E8%AF%BE%EF%BC%9A%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%EF%BC%9A%E4%BD%A0%E4%B8%8D%E5%8F%AF%E8%83%BD%E6%80%BB%E6%98%AF%E5%AF%B9%E7%9A%84/</id>
    <published>2021-04-23T01:52:53.289Z</published>
    <updated>2021-04-23T02:10:36.935Z</updated>
    
    <content type="html"><![CDATA[<p>练习题（来自小甲鱼官方论坛）</p><h1 id="0-结合你自身的编程经验，总结下异常处理机制的重要性？"><a href="#0-结合你自身的编程经验，总结下异常处理机制的重要性？" class="headerlink" title="0.结合你自身的编程经验，总结下异常处理机制的重要性？"></a>0.结合你自身的编程经验，总结下异常处理机制的重要性？</h1><p>答：由于环境的不确定性和用户操作的不可以预知性都可能导致程序出现各种问题，因此异常机制最重要的无非就是：增强程序的健壮性和用户体验，尽可能的捕获所有预知的异常并写好处理的代码，当异常出现的时候，程序自动消化并恢复正常（不至于崩溃）。</p><hr><h1 id="1-请问以下代码是否会产生异常，如果会的话，请写出异常的名称："><a href="#1-请问以下代码是否会产生异常，如果会的话，请写出异常的名称：" class="headerlink" title="1. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称："></a>1. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称：</h1><p><code>&gt;&gt;&gt; my_list = [1, 2, 3, 4,,]</code><br> 答：语法错误<br> SyntaxError: invalid syntax.</p><hr><h1 id="2-请问以下代码是否会产生异常，如果会的话，请写出异常的名称："><a href="#2-请问以下代码是否会产生异常，如果会的话，请写出异常的名称：" class="headerlink" title="2. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称："></a>2. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称：</h1><p><code>&gt;&gt;&gt; my_list = [1, 2, 3, 4, 5]</code><br> <code>&gt;&gt;&gt; print(my_list[len(my_list)])</code><br> 答：列表越界<br> Indexerror: list index out of range.</p><hr><h1 id="3-请问以下代码是否会产生异常，如果会的话，请写出异常的名称："><a href="#3-请问以下代码是否会产生异常，如果会的话，请写出异常的名称：" class="headerlink" title="3. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称："></a>3. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称：</h1><p><code>&gt;&gt;&gt; my_list = [3, 5, 1, 4, 2]</code><br> <code>&gt;&gt;&gt; my_list.sorted()</code><br> 答：尝试访问未知的对象属性<br> AttributeError: ‘list’ object has no attribute ‘sorted’.</p><hr><h1 id="4-请问以下代码是否会产生异常，如果会的话，请写出异常的名称："><a href="#4-请问以下代码是否会产生异常，如果会的话，请写出异常的名称：" class="headerlink" title="4. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称："></a>4. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称：</h1><p><code>&gt;&gt;&gt; my_dict = &#123;&#39;host&#39;: &#39;http://bbs.fishc.com&#39;, &#39;port&#39;: &#39;80&#39;&#125;</code><br> <code>&gt;&gt;&gt; print(my_dict[&#39;server&#39;])</code><br> 答：键不存在<br> KeyError:建议使用dict.get()方法预防</p><hr><h1 id="5-请问以下代码是否会产生异常，如果会的话，请写出异常的名称："><a href="#5-请问以下代码是否会产生异常，如果会的话，请写出异常的名称：" class="headerlink" title="5. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称："></a>5. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_fun</span>(<span class="params">x, y</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(x, y) </span><br><span class="line">my_fun(x=<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>答：SyntaxError: positional argument follows keyword argument.<br> 要么就都是关键字参数my_fun(x=1, y=2)，要么就关键字参数必须跟随在位置参数后面my_fun(1,y=2)。</p><hr><h1 id="6-请问以下代码是否会产生异常，如果会的话，请写出异常的名称："><a href="#6-请问以下代码是否会产生异常，如果会的话，请写出异常的名称：" class="headerlink" title="6. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称："></a>6. 请问以下代码是否会产生异常，如果会的话，请写出异常的名称：</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">&#x27;C:\\test.txt&#x27;</span>, wb)</span><br><span class="line">f.write(<span class="string">&#x27;I love FishC.com!\n&#x27;</span>)</span><br><span class="line">f.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p>答：NameError: name ‘wb’ is not defined.<br> 注意 open() 第二个参数是字符串，应该 f = open(‘C:\test.txt’, ‘wb’) 。wb不加双引号 Python 还以为是变量名呢，往上一找，艾玛没找着……引发 NameError 异常。由于打开文件失败，接着下边一连串与 f 相关的均会报同样异常。</p><hr><ol><li>请问以下代码是否会产生异常，如果会的话，请写出异常的名称：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_fun1</span>():</span></span><br><span class="line">        x = <span class="number">5</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_fun2</span>():</span></span><br><span class="line">                x *= x  <span class="comment"># 错误在这里</span></span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">return</span> my_fun2()</span><br><span class="line"> </span><br><span class="line">my_fun1()</span><br></pre></td></tr></table></figure><p>答：UnboundLocalError: local variable ‘x’ referenced before assignment.<br> 闭包的知识大家还记得不？ Python 认为在内部函数的 x 是局部变量的时候，外部函数的 x 就被屏蔽了起来，所以执行 x *= x 的时候，在右边根本就找不到局部变量 x 的值，因此报错。<br> 在 Python3 之前没有直接的解决方案，只能间接地通过容器类型来存放，因为容器类型不是放在栈里，所以不会<br> 被“屏蔽”掉。容器类型这个词儿大家是不是似曾相识？我们之前介绍的字符串、列表、元祖，这些啥都可以往里的扔的就是容器类型啦。<br> 于是乎我们可以把代码改造为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_fun1</span>():</span></span><br><span class="line">        x = [<span class="number">5</span>]</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_fun2</span>():</span></span><br><span class="line">                x[<span class="number">0</span>] *= x[<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">return</span> x[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">return</span> my_fun2()</span><br><span class="line"> </span><br><span class="line">my_fun1()</span><br></pre></td></tr></table></figure><p>但是到了 Python3 的世界里，又有了不少的改进，如果我们希望在内部函数里可以修改外部函数里的局部变量的值，那么也有一个关键字可以使用，就是 nonlocal：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_fun1</span>():</span></span><br><span class="line">        x = <span class="number">5</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">my_fun2</span>():</span></span><br><span class="line">                <span class="keyword">nonlocal</span> x</span><br><span class="line">                x *= x</span><br><span class="line">                <span class="keyword">return</span> x</span><br><span class="line">        <span class="keyword">return</span> my_fun2()</span><br><span class="line"> </span><br><span class="line">my_fun1()</span><br></pre></td></tr></table></figure><hr><h1 id="8-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"><a href="#8-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！" class="headerlink" title="8.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"></a>8.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！</h1><ul><li>Python标准异常总结</li></ul><table><thead><tr><th>异常名称</th><th>解释</th></tr></thead><tbody><tr><td>AssertionError</td><td>断言语句（assert）失败：当assert关键字后边的条件为假时，程序将抛出该异常，一般用于在代码中置入检查点</td></tr><tr><td>AttributeError</td><td>尝试访问未知的对象属性：当试图访问的对象属性不存在时抛出的异常</td></tr><tr><td>EOFError</td><td>这个错误基本上是意味着它发现了一个不期望的文件尾。（UNIX上为Ctrl+d，Windows上为Ctrl+Z+Enter）</td></tr><tr><td>FloatingPointError</td><td>浮点计算错误</td></tr><tr><td>GeneratorExit</td><td>Gengeator.close()方法被调用的时候</td></tr><tr><td>ImportError</td><td>导入模块失败的时候</td></tr><tr><td>IndexError</td><td>索引超出序列的范围</td></tr><tr><td>KeyError</td><td>字典中查找一个不存在的关键字</td></tr><tr><td>KeyboardError</td><td>用户输入中断键（Ctrl+c）</td></tr><tr><td>MemoryError</td><td>内存溢出（可通过删除对象释放内存）</td></tr><tr><td>NameError</td><td>尝试访问一个不存在的变量</td></tr><tr><td>NotImplementedError</td><td>尚未实现的方法</td></tr><tr><td>OSError</td><td>操作系统产生的异常（例如打开一个不存在的文件）</td></tr><tr><td>OverflowError</td><td>数值运算超出最大限制</td></tr><tr><td>ReferenceError</td><td>弱引用（weak reference）试图访问一个已经被垃圾回收几只回收了的对象</td></tr><tr><td>RuntimeError</td><td>一般的运行时错误</td></tr><tr><td>StopIteration</td><td>迭代器没有更多的值</td></tr><tr><td>SyntaxError</td><td>Python的语法错误</td></tr><tr><td>IndentationError</td><td>缩进错误</td></tr><tr><td>TabError</td><td>Tab和空格混合使用</td></tr><tr><td>SystemError</td><td>Python编译器系统错误</td></tr><tr><td>SystenExit</td><td>Python编译器进程被关闭</td></tr><tr><td>TypeError</td><td>不同类型间的无效操作</td></tr><tr><td>UnboundLocalError</td><td>访问一个未初始化的本地变量（NameError的子类）</td></tr><tr><td>UnicodeError</td><td>Unicode相关的错误（ValueError的子类）</td></tr><tr><td>UnicodeEncodeError</td><td>Unicode编码时的错误（UnicodeError的子类）</td></tr><tr><td>UnicodeDecodeError</td><td>Unicode解码时的错误（UnicodeError的子类）</td></tr><tr><td>UnicodeTranslateError</td><td>Unicode转换时的错误（UnicodeError的子类）</td></tr><tr><td>ValueError</td><td>传入无效的参数</td></tr><tr><td>ZeroDivisionError</td><td>除数为零</td></tr></tbody></table><ul><li>Python内置异常类的层次结构</li></ul><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">BaseException</span><br><span class="line"> +-- SystemExit</span><br><span class="line"> +-- KeyboardInterrupt</span><br><span class="line"> +-- GeneratorExit</span><br><span class="line"> +-- Exception</span><br><span class="line">      +-- StopIteration</span><br><span class="line">      +-- StopAsyncIteration</span><br><span class="line">      +-- ArithmeticError</span><br><span class="line">      <span class="params">|    +-- FloatingPointError</span></span><br><span class="line"><span class="params">      |</span>    +-- OverflowError</span><br><span class="line">      <span class="params">|    +-- ZeroDivisionError</span></span><br><span class="line"><span class="params">      +-- AssertionError</span></span><br><span class="line"><span class="params">      +-- AttributeError</span></span><br><span class="line"><span class="params">      +-- BufferError</span></span><br><span class="line"><span class="params">      +-- EOFError</span></span><br><span class="line"><span class="params">      +-- ImportError</span></span><br><span class="line"><span class="params">      |</span>    +-- ModuleNotFoundError</span><br><span class="line">      +-- LookupError</span><br><span class="line">      <span class="params">|    +-- IndexError</span></span><br><span class="line"><span class="params">      |</span>    +-- KeyError</span><br><span class="line">      +-- MemoryError</span><br><span class="line">      +-- NameError</span><br><span class="line">      <span class="params">|    +-- UnboundLocalError</span></span><br><span class="line"><span class="params">      +-- OSError</span></span><br><span class="line"><span class="params">      |</span>    +-- BlockingIOError</span><br><span class="line">      <span class="params">|    +-- ChildProcessError</span></span><br><span class="line"><span class="params">      |</span>    +-- ConnectionError</span><br><span class="line">      <span class="params">|    |</span>    +-- BrokenPipeError</span><br><span class="line">      <span class="params">|    |</span>    +-- ConnectionAbortedError</span><br><span class="line">      <span class="params">|    |</span>    +-- ConnectionRefusedError</span><br><span class="line">      <span class="params">|    |</span>    +-- ConnectionResetError</span><br><span class="line">      <span class="params">|    +-- FileExistsError</span></span><br><span class="line"><span class="params">      |</span>    +-- FileNotFoundError</span><br><span class="line">      <span class="params">|    +-- InterruptedError</span></span><br><span class="line"><span class="params">      |</span>    +-- IsADirectoryError</span><br><span class="line">      <span class="params">|    +-- NotADirectoryError</span></span><br><span class="line"><span class="params">      |</span>    +-- PermissionError</span><br><span class="line">      <span class="params">|    +-- ProcessLookupError</span></span><br><span class="line"><span class="params">      |</span>    +-- TimeoutError</span><br><span class="line">      +-- ReferenceError</span><br><span class="line">      +-- RuntimeError</span><br><span class="line">      <span class="params">|    +-- NotImplementedError</span></span><br><span class="line"><span class="params">      |</span>    +-- RecursionError</span><br><span class="line">      +-- SyntaxError</span><br><span class="line">      <span class="params">|    +-- IndentationError</span></span><br><span class="line"><span class="params">      |</span>         +-- TabError</span><br><span class="line">      +-- SystemError</span><br><span class="line">      +-- TypeError</span><br><span class="line">      +-- ValueError</span><br><span class="line">      <span class="params">|    +-- UnicodeError</span></span><br><span class="line"><span class="params">      |</span>         +-- UnicodeDecodeError</span><br><span class="line">      <span class="params">|         +-- UnicodeEncodeError</span></span><br><span class="line"><span class="params">      |</span>         +-- UnicodeTranslateError</span><br><span class="line">      +-- Warning</span><br><span class="line">           +-- DeprecationWarning</span><br><span class="line">           +-- PendingDeprecationWarning</span><br><span class="line">           +-- RuntimeWarning</span><br><span class="line">           +-- SyntaxWarning</span><br><span class="line">           +-- UserWarning</span><br><span class="line">           +-- FutureWarning</span><br><span class="line">           +-- ImportWarning</span><br><span class="line">           +-- UnicodeWarning</span><br><span class="line">           +-- BytesWarning</span><br><span class="line">           +-- ResourceWarning</span><br></pre></td></tr></table></figure><p>转载自<a href="https://docs.python.org/3/library/exceptions.html#bltin-exceptions">https://docs.python.org/3/library/exceptions.html#bltin-exceptions</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;练习题（来自小甲鱼官方论坛）&lt;/p&gt;
&lt;h1 id=&quot;0-结合你自身的编程经验，总结下异常处理机制的重要性？&quot;&gt;&lt;a href=&quot;#0-结合你自身的编程经验，总结下异常处理机制的重要性？&quot; class=&quot;headerlink&quot; title=&quot;0.结合你自身的编程经验，总结下</summary>
      
    
    
    
    <category term="Pyhon" scheme="http://example.com/categories/Pyhon/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>第三十一课：文件：腌制一缸美味的泡菜</title>
    <link href="http://example.com/2021/04/22/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%9A%E6%96%87%E4%BB%B6%EF%BC%9A%E8%85%8C%E5%88%B6%E4%B8%80%E7%BC%B8%E7%BE%8E%E5%91%B3%E7%9A%84%E6%B3%A1%E8%8F%9C/"/>
    <id>http://example.com/2021/04/22/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E4%B8%80%E8%AF%BE%EF%BC%9A%E6%96%87%E4%BB%B6%EF%BC%9A%E8%85%8C%E5%88%B6%E4%B8%80%E7%BC%B8%E7%BE%8E%E5%91%B3%E7%9A%84%E6%B3%A1%E8%8F%9C/</id>
    <published>2021-04-22T10:27:05.751Z</published>
    <updated>2021-04-22T10:32:58.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-pickle的实质是什么？"><a href="#0-pickle的实质是什么？" class="headerlink" title="0.pickle的实质是什么？"></a>0.pickle的实质是什么？</h1><p>答：pickle的实质就是利用一些算法将你的数据对象“腌制”成二进制文件，存储在磁盘上，当然也可以放在数据库或者通过网络传输到另一台计算机上。</p><hr><h1 id="1-使用pickle的什么方法存储数据？"><a href="#1-使用pickle的什么方法存储数据？" class="headerlink" title="1.使用pickle的什么方法存储数据？"></a>1.使用pickle的什么方法存储数据？</h1><p>答：pickle.dump(data, file) # 第一个参数是待存储的数据对象，第二个参数是目标存储的文件对象，注意要先使用’wb’的模式open文件哦。</p><hr><h1 id="2-使用pickle的什么方法读取数据？"><a href="#2-使用pickle的什么方法读取数据？" class="headerlink" title="2.使用pickle的什么方法读取数据？"></a>2.使用pickle的什么方法读取数据？</h1><p>答：pickle.load(file) # 参数是目标存储的文件对象，注意要先使用’rb’的模式open文件哦。</p><hr><h1 id="3-使用pickle能不能保存”-txt”类型的文件？"><a href="#3-使用pickle能不能保存”-txt”类型的文件？" class="headerlink" title="3.使用pickle能不能保存”.txt”类型的文件？"></a>3.使用pickle能不能保存”.txt”类型的文件？</h1><p>答：可以，不过打开后是乱码，因为是以二进制的模式写入的。</p><hr><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h1 id="0-编写一个程序，这次要求使用pickle将文件（33-txt）里的对话按照以下要求腌制成不同文件（没错，是第29讲的内容小改，考考你自己能写出来吗？这里建议下载后的33-txt文件最后在自己的本地新建一个同名文件，再把内容拷贝进去，避免一些由于编码造成的报错）："><a href="#0-编写一个程序，这次要求使用pickle将文件（33-txt）里的对话按照以下要求腌制成不同文件（没错，是第29讲的内容小改，考考你自己能写出来吗？这里建议下载后的33-txt文件最后在自己的本地新建一个同名文件，再把内容拷贝进去，避免一些由于编码造成的报错）：" class="headerlink" title="0. 编写一个程序，这次要求使用pickle将文件（33.txt）里的对话按照以下要求腌制成不同文件（没错，是第29讲的内容小改，考考你自己能写出来吗？这里建议下载后的33.txt文件最后在自己的本地新建一个同名文件，再把内容拷贝进去，避免一些由于编码造成的报错）："></a>0. 编写一个程序，这次要求使用pickle将文件（<a href="https://pan.baidu.com/s/1yW4TW44qljyEYQuhlIooNA">33.txt</a>）里的对话按照以下要求腌制成不同文件（没错，是第29讲的内容小改，考考你自己能写出来吗？<code>这里建议下载后的33.txt文件最后在自己的本地新建一个同名文件，再把内容拷贝进去，避免一些由于编码造成的报错</code>）：</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_pickle_file</span>(<span class="params">boy,girl,count</span>):</span></span><br><span class="line">    file_name_boy = <span class="string">&#x27;boy_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    file_name_girl = <span class="string">&#x27;girl_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line"> </span><br><span class="line">    boy_pickle_file = <span class="built_in">open</span>(file_name_boy,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    girl_pickle_file = <span class="built_in">open</span>(file_name_girl,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">    pickle.dump(boy,boy_pickle_file)</span><br><span class="line">    pickle.dump(girl,girl_pickle_file)</span><br><span class="line"> </span><br><span class="line">    boy_pickle_file.close()</span><br><span class="line">    girl_pickle_file.close()</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_file</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name)</span><br><span class="line">    boy = []</span><br><span class="line">    girl = []</span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> each_line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="keyword">if</span> each_line[:<span class="number">6</span>] != <span class="string">&#x27;======&#x27;</span>:</span><br><span class="line">            (role,line_spoken) = each_line.split(<span class="string">&#x27;:&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> role == <span class="string">&#x27;小甲鱼&#x27;</span>:</span><br><span class="line">                boy.append(line_spoken)</span><br><span class="line">            <span class="keyword">elif</span> role == <span class="string">&#x27;小客服&#x27;</span>:</span><br><span class="line">                girl.append(line_spoken)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            save_pickle_file(boy,girl,count)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            boy = []</span><br><span class="line">            girl = []</span><br><span class="line"> </span><br><span class="line">    save_pickle_file(boy,girl,count)</span><br><span class="line"> </span><br><span class="line">    f.close()</span><br><span class="line"> </span><br><span class="line">split_file(<span class="string">&#x27;33.txt&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="1-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"><a href="#1-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！" class="headerlink" title="1.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"></a>1.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！</h1><ul><li>piickle模块的用法：<br> 总体使用方法类似于文件的读写，都要遵循打开→读/写→关闭</li><li>写入：<br> 首先打开：pickle_file = open(‘my_list.pkl’,’wb’)#打开名为my_list.pkl的文件，以二进制的方式进行写入<br> 写入：pickle.dump(temp_list,pickle_file)#把列表temp_list中的内容写入到my_list.pkl中,pickle_file表示打开的文件对象<br> 关闭：pickle_file.close()</li><li>读取：<br> 打开：pickle_file = open(‘(‘my_list.pkl’,’rb’)#以二进制读的方式打开文件my_list.pkl<br> 读取：temp1_list = pickle.load(pickle_file)<br> 关闭：pickle_file.close()</li></ul>]]></content>
    
    
    <summary type="html">课后习题</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2021/04/22/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/test/"/>
    <id>http://example.com/2021/04/22/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/test/</id>
    <published>2021-04-22T10:27:02.570Z</published>
    <updated>2021-04-20T02:30:17.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p><h2 id="1-研究目标"><a href="#1-研究目标" class="headerlink" title="1. 研究目标"></a>1. 研究目标</h2><p><img src="test/image-20210414120832812.png" alt="image-20210414120832812"></p><h2 id="2-研究背景及问题陈述"><a href="#2-研究背景及问题陈述" class="headerlink" title="2. 研究背景及问题陈述"></a>2. 研究背景及问题陈述</h2><h2 id="3-研究方法"><a href="#3-研究方法" class="headerlink" title="3. 研究方法"></a>3. 研究方法</h2><h2 id="4-评估，实验"><a href="#4-评估，实验" class="headerlink" title="4. 评估，实验"></a>4. 评估，实验</h2><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><h2 id="6-笔记"><a href="#6-笔记" class="headerlink" title="6. 笔记"></a>6. 笔记</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-总结&quot;&gt;&lt;a href=&quot;#0-总结&quot; class=&quot;headerlink&quot; title=&quot;0. 总结&quot;&gt;&lt;/a&gt;0. 总结&lt;/h2&gt;&lt;p&gt;写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己</summary>
      
    
    
    
    <category term="论文" scheme="http://example.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>第二十九课：文件：一个任务</title>
    <link href="http://example.com/2021/04/22/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%9A%E6%96%87%E4%BB%B6%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1/"/>
    <id>http://example.com/2021/04/22/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B9%9D%E8%AF%BE%EF%BC%9A%E6%96%87%E4%BB%B6%EF%BC%9A%E4%B8%80%E4%B8%AA%E4%BB%BB%E5%8A%A1/</id>
    <published>2021-04-22T01:25:07.410Z</published>
    <updated>2021-04-22T08:13:56.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h1 id="0-编写一个程序，接受用户的输入并保存为新的文件，程序实现如图："><a href="#0-编写一个程序，接受用户的输入并保存为新的文件，程序实现如图：" class="headerlink" title="0. 编写一个程序，接受用户的输入并保存为新的文件，程序实现如图："></a>0. 编写一个程序，接受用户的输入并保存为新的文件，程序实现如图：</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210422094947.webp" alt="img"></p><p>答：代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filewrite</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;请输入内容【单独输入‘:w’保存退出】：&#x27;</span>)</span><br><span class="line">    f = <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = <span class="built_in">input</span>()</span><br><span class="line">        <span class="keyword">if</span> a != <span class="string">&#x27;:w&#x27;</span>:</span><br><span class="line">            f.write(<span class="string">&#x27;%s\n&#x27;</span> % a)  <span class="comment"># 注意这里有换行符</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入文件名：&#x27;</span>)</span><br><span class="line">filewrite(file_name)</span><br></pre></td></tr></table></figure><p>运行过程如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">请输入文件名：<span class="number">1111.</span>txt</span><br><span class="line">请输入内容【单独输入‘:w’保存退出】：</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">aaa</span><br><span class="line">啊啊啊</span><br><span class="line"></span><br><span class="line">:w</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure><p>文件打开查看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">123</span><br><span class="line">123</span><br><span class="line">456</span><br><span class="line">aaa</span><br><span class="line">啊啊啊</span><br></pre></td></tr></table></figure><h1 id="1-编写一个程序，比较用户输入的两个文件，如果不同，显示出所有不同处的行号与第一个不同字符的位置，程序实现如图："><a href="#1-编写一个程序，比较用户输入的两个文件，如果不同，显示出所有不同处的行号与第一个不同字符的位置，程序实现如图：" class="headerlink" title="1. 编写一个程序，比较用户输入的两个文件，如果不同，显示出所有不同处的行号与第一个不同字符的位置，程序实现如图："></a>1. 编写一个程序，比较用户输入的两个文件，如果不同，显示出所有不同处的行号与第一个不同字符的位置，程序实现如图：</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210422100625.webp" alt="img"></p><p>答案：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#不用函数方法</span></span><br><span class="line">file1= <span class="built_in">input</span>(<span class="string">&#x27;请输入需要对比的第一个文件名：&#x27;</span>)</span><br><span class="line">file2= <span class="built_in">input</span>(<span class="string">&#x27;请输入需要对比的第二个文件名：&#x27;</span>)</span><br><span class="line">f1= <span class="built_in">open</span>(file1)</span><br><span class="line">f2= <span class="built_in">open</span>(file2)</span><br><span class="line">hangshu=<span class="number">0</span></span><br><span class="line">butonghang=[]</span><br><span class="line"><span class="keyword">for</span> eachline <span class="keyword">in</span> f1:</span><br><span class="line">    eachline2=f2.readline()</span><br><span class="line">    hangshu+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> eachline!=eachline2:</span><br><span class="line">        butonghang.append(hangshu)</span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(butonghang)==<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两个文件内容完全一样&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两个文件共有%d处不同&#x27;</span>%<span class="built_in">len</span>(butonghang))</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> butonghang:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第%d行不一样&#x27;</span>%each)</span><br><span class="line"></span><br><span class="line"><span class="comment">#调用函数方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_compare</span>(<span class="params">file1, file2</span>):</span></span><br><span class="line">    f1 = <span class="built_in">open</span>(file1)</span><br><span class="line">    f2 = <span class="built_in">open</span>(file2)</span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 统计行数</span></span><br><span class="line">    differ = []  <span class="comment"># 统计不一样的数量</span></span><br><span class="line">    <span class="keyword">for</span> line1 <span class="keyword">in</span> f1:</span><br><span class="line">        line2 = f2.readline()</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> line1 != line2:</span><br><span class="line">            differ.append(count)</span><br><span class="line"></span><br><span class="line">    f1.close()</span><br><span class="line">    f2.close()</span><br><span class="line">    <span class="keyword">return</span> differ</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file1 = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要比较的头一个文件名：&#x27;</span>)</span><br><span class="line">file2 = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要比较的另一个文件名：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">differ = file_compare(file1, file2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(differ) == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两个文件完全一样！&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;两个文件共有【%d】处不同：&#x27;</span> % <span class="built_in">len</span>(differ))</span><br><span class="line">    <span class="built_in">print</span>(differ)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> differ:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;第%d行不一样&#x27;</span> % each)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请输入需要比较的头一个文件名：<span class="number">1</span><span class="selector-class">.txt</span></span><br><span class="line">请输入需要比较的另一个文件名：<span class="number">2</span><span class="selector-class">.txt</span></span><br><span class="line">两个文件共有【<span class="number">3</span>】处不同：</span><br><span class="line"><span class="selector-attr">[5, 6, 7]</span></span><br><span class="line">第<span class="number">5</span>行不一样</span><br><span class="line">第<span class="number">6</span>行不一样</span><br><span class="line">第<span class="number">7</span>行不一样</span><br></pre></td></tr></table></figure><h1 id="2-编写一个程序，当用户输入文件名和行数（N）后，将该文件的前N行内容打印到屏幕上，程序实现如图："><a href="#2-编写一个程序，当用户输入文件名和行数（N）后，将该文件的前N行内容打印到屏幕上，程序实现如图：" class="headerlink" title="2. 编写一个程序，当用户输入文件名和行数（N）后，将该文件的前N行内容打印到屏幕上，程序实现如图："></a>2. 编写一个程序，当用户输入文件名和行数（N）后，将该文件的前N行内容打印到屏幕上，程序实现如图：</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210422103536.webp" alt="img"></p><p>答：代码如下：两种都可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_print</span>(<span class="params">file, num</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(file)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;文件%s的前%d行的内容如下：&#x27;&#x27;&#x27;</span> % (file, num))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">        <span class="built_in">print</span>(f.readline())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="built_in">input</span>(<span class="string">&#x27;请输入要打开的文件（C:\\test.txt）：&#x27;</span>)</span><br><span class="line">num = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入需要显示该文件前几行：&#x27;</span>))</span><br><span class="line">file_print(file_name, num)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_view</span>(<span class="params">file_name, line_nun</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n文件%s的前%s的内容如下：\n&#x27;</span> % (file_name, line_num))</span><br><span class="line">    f = <span class="built_in">open</span>(file_name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>(line_num)):</span><br><span class="line">        <span class="built_in">print</span>(f.readline(), end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="built_in">input</span>(<span class="string">r&#x27;请输入要打开的文件（C:\\test.txt）：&#x27;</span>)</span><br><span class="line">line_num = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要显示该文件前几行：&#x27;</span>)</span><br><span class="line">file_view(file_name, line_num)</span><br></pre></td></tr></table></figure><h1 id="3-呃，不得不说我们的用户变得越来越刁钻了。要求在上一题的基础上扩展，用户可以随意输入需要显示的行数。（如输入13-21打印第13行到第21行，输入-21打印前21行，输入21-则打印从第21行开始到文件结尾所有内容）"><a href="#3-呃，不得不说我们的用户变得越来越刁钻了。要求在上一题的基础上扩展，用户可以随意输入需要显示的行数。（如输入13-21打印第13行到第21行，输入-21打印前21行，输入21-则打印从第21行开始到文件结尾所有内容）" class="headerlink" title="3.  呃，不得不说我们的用户变得越来越刁钻了。要求在上一题的基础上扩展，用户可以随意输入需要显示的行数。（如输入13:21打印第13行到第21行，输入:21打印前21行，输入21:则打印从第21行开始到文件结尾所有内容）"></a>3.  呃，不得不说我们的用户变得越来越刁钻了。要求在上一题的基础上扩展，用户可以随意输入需要显示的行数。（如输入13:21打印第13行到第21行，输入:21打印前21行，输入21:则打印从第21行开始到文件结尾所有内容）</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210422104833.webp" alt="img"></p><p>答：代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">file = <span class="built_in">input</span>(<span class="string">&#x27;请输入想要打开的文件：&#x27;</span>)</span><br><span class="line">hangshu=<span class="built_in">input</span>(<span class="string">&#x27;请输入想要显示的行数(例如12：23)：&#x27;</span>)</span><br><span class="line">(start,end)=hangshu.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> start==<span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    start=<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    start= <span class="built_in">int</span>(start)</span><br><span class="line"><span class="keyword">if</span> end == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    end=-<span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    end = <span class="built_in">int</span>(end)</span><br><span class="line">f = <span class="built_in">open</span>(file)</span><br><span class="line"><span class="keyword">if</span> start==<span class="number">1</span>:</span><br><span class="line">    <span class="keyword">if</span> end == -<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件%s从开头到结束内容如下:&#x27;</span>%file)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件%s从开头到%d行内容如下:&#x27;</span>%(file,end))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> end ==-<span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件%s从%d到结束内容如下:&#x27;</span>%(file,start))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件%s从%d到%d内容如下:&#x27;</span>%(file,start,end))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start -<span class="number">1</span>):</span><br><span class="line">    f.readline()  <span class="comment">#获取start前的内容</span></span><br><span class="line">hangshu=end -start +<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> hangshu&lt;<span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(f.read())</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(hangshu):</span><br><span class="line">        <span class="built_in">print</span>(f.readline()) <span class="comment">#输入从start到end行内容</span></span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#封装成函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_print</span>(<span class="params">file, paragraph</span>):</span></span><br><span class="line">    (start, end) = paragraph.split(<span class="string">&#x27;:&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> start == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        start = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        start = <span class="built_in">int</span>(start)</span><br><span class="line">    <span class="keyword">if</span> end == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">        end = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        end = <span class="built_in">int</span>(end)</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(file)</span><br><span class="line">    <span class="keyword">if</span> start == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> end == -<span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;文件%s的从开头到结束的内容如下：&#x27;&#x27;&#x27;</span> % file)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;文件%s的从开头到第%d行的内容如下：&#x27;&#x27;&#x27;</span> % (file, end))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> end == -<span class="number">1</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;文件%s的从%d行到结束的内容如下：&#x27;&#x27;&#x27;</span> % (file, start))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;&#x27;&#x27;文件%s的从第%d行到第%d行的内容如下：&#x27;&#x27;&#x27;</span> % (file, start, end))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(start - <span class="number">1</span>):</span><br><span class="line">        f.readline()</span><br><span class="line">    num = end - start + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(f.read())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num):</span><br><span class="line">            <span class="built_in">print</span>(f.readline())</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name = <span class="built_in">input</span>(<span class="string">r&#x27;请输入要打开的文件（C:\\test.txt）：&#x27;</span>)</span><br><span class="line">paragraph = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要显示的行数【格式如13：21或：21或21：】：&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> paragraph == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">    paragraph = <span class="built_in">input</span>(<span class="string">&#x27;输入有误，请重新输入：&#x27;</span>)</span><br><span class="line">file_print(file_name, paragraph)</span><br></pre></td></tr></table></figure><h1 id="4-编写一个程序，实现“全部替换”功能。"><a href="#4-编写一个程序，实现“全部替换”功能。" class="headerlink" title="4. 编写一个程序，实现“全部替换”功能。"></a>4. 编写一个程序，实现“全部替换”功能。</h1><p>答：代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hanshu</span>(<span class="params">file_name,replace_word,new_word</span>):</span></span><br><span class="line">    f_read = <span class="built_in">open</span>(file_name)</span><br><span class="line">    content = []</span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> each_line <span class="keyword">in</span> f_read:</span><br><span class="line">        <span class="keyword">if</span> replace_word <span class="keyword">in</span> each_line:</span><br><span class="line">            count+=each_line.count(replace_word) <span class="comment">#计算需要替换的replace_word出现了几次</span></span><br><span class="line">            each_line=each_line.replace(replace_word,new_word)</span><br><span class="line">            content.append(each_line)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            content.append(each_line)</span><br><span class="line">    decide = <span class="built_in">input</span>(<span class="string">&#x27;\n文件 %s 中共有%s个【%s】\n您确定要把所有的【%s】替换为【%s】吗？\n【YES/NO】：&#x27;</span> \</span><br><span class="line">                       % (file_name, count, replace_word, replace_word, new_word))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> decide <span class="keyword">in</span> [<span class="string">&#x27;YES&#x27;</span>, <span class="string">&#x27;Yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>]:</span><br><span class="line">            f_write = <span class="built_in">open</span>(file_name, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">            f_write.writelines(content)</span><br><span class="line">            f_write.close()</span><br><span class="line"></span><br><span class="line">    f_read.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">file_name= <span class="built_in">input</span>(<span class="string">&#x27;请输入文件名：&#x27;</span>)</span><br><span class="line">replace_word= <span class="built_in">input</span>(<span class="string">&quot;请输入想要替换的单词或字符：&quot;</span>)</span><br><span class="line">new_word=<span class="built_in">input</span>(<span class="string">&#x27;请输入新的单词或字符：&#x27;</span>)</span><br><span class="line">hanshu(file_name,replace_word,new_word)</span><br></pre></td></tr></table></figure><p>执行过程：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">请输入文件名：<span class="number">1.</span>txt</span><br><span class="line">请输入想要替换的单词或字符：我</span><br><span class="line">请输入新的单词或字符：<span class="number">5</span></span><br><span class="line"></span><br><span class="line">文件 <span class="number">1.</span>txt 中共有<span class="number">2</span>个【我】</span><br><span class="line">您确定要把所有的【我】替换为【<span class="number">5</span>】吗？</span><br><span class="line">【YES/NO】：yes</span><br><span class="line"></span><br><span class="line">Process finished <span class="keyword">with</span> exit code <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;编程题&quot;&gt;&lt;a href=&quot;#编程题&quot; class=&quot;headerlink&quot; title=&quot;编程题&quot;&gt;&lt;/a&gt;编程题&lt;/h2&gt;&lt;h1 id=&quot;0-编写一个程序，接受用户的输入并保存为新的文件，程序实现如图：&quot;&gt;&lt;a href=&quot;#0-编写一个程序，接受用户的输入并</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="python" scheme="http://example.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>小甲鱼三十课文件系统：介绍一个高大上的东西，课上习题＆课后作业</title>
    <link href="http://example.com/2021/04/21/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E8%AF%BE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%8C%E8%AF%BE%E4%B8%8A%E4%B9%A0%E9%A2%98%EF%BC%86%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/"/>
    <id>http://example.com/2021/04/21/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%B8%89%E5%8D%81%E8%AF%BE%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%AA%E9%AB%98%E5%A4%A7%E4%B8%8A%E7%9A%84%E4%B8%9C%E8%A5%BF%EF%BC%8C%E8%AF%BE%E4%B8%8A%E4%B9%A0%E9%A2%98%EF%BC%86%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</id>
    <published>2021-04-21T11:34:14.950Z</published>
    <updated>2021-04-21T13:20:00.987Z</updated>
    
    <content type="html"><![CDATA[<p>•任务：将文件（record.txt）中的数据进行分割并按照以下规律保存起来：</p><p>–小甲鱼的对话单独保存为boy_*.txt的文件（去掉“小甲鱼:”）</p><p>–小客服的对话单独保存为girl_*.txt的文件（去掉“小客服:”）</p><p>–文件中总共有三段对话，分别保存为boy_1.txt, girl_1.txt，boy_2.txt, girl_2.txt, boy_3.txt, gril_3.txt共6个文件（提示：文件中不同的对话间已经使用“==========”分割）</p><p>基础方法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p8_1.py</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line">boy = []</span><br><span class="line">girl = []</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\HP\Desktop\源代码\源代码\p8\record2.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="keyword">if</span> each_line[:<span class="number">6</span>] != <span class="string">&#x27;======&#x27;</span>:</span><br><span class="line">        <span class="comment"># 用split切片函数分别把冒号前后的语句送入role，line_spoken</span></span><br><span class="line">        (role, line_spoken) = each_line.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> role == <span class="string">&#x27;小甲鱼&#x27;</span>:</span><br><span class="line">            boy.append(line_spoken)</span><br><span class="line">        <span class="keyword">if</span> role == <span class="string">&#x27;小客服&#x27;</span>:</span><br><span class="line">            girl.append(line_spoken)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        file_name_boy = <span class="string">&#x27;boy_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">        file_name_girl = <span class="string">&#x27;girl_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">        boy_file = <span class="built_in">open</span>(file_name_boy, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">        girl_file = <span class="built_in">open</span>(file_name_girl, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        boy_file.writelines(boy)</span><br><span class="line">        girl_file.writelines(girl)</span><br><span class="line"></span><br><span class="line">        boy = []</span><br><span class="line">        girl = []</span><br><span class="line">        count += <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">file_name_boy = <span class="string">&#x27;boy_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">file_name_girl = <span class="string">&#x27;girl_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">boy_file = <span class="built_in">open</span>((<span class="string">r&quot;C:\Users\HP\Desktop\源代码\源代码\p8\%s&quot;</span> % file_name_boy), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">girl_file = <span class="built_in">open</span>((<span class="string">r&quot;C:\Users\HP\Desktop\源代码\源代码\p8\%s&quot;</span> % file_name_girl), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">boy_file.writelines(boy)</span><br><span class="line">girl_file.writelines(girl)</span><br><span class="line"></span><br><span class="line">boy_file.close()</span><br><span class="line">girl_file.close()</span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>封装成函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p8_2.py</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_file</span>(<span class="params">boy, girl, count</span>):</span></span><br><span class="line">    file_name_boy = <span class="string">&#x27;boy_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line">    file_name_girl = <span class="string">&#x27;girl_&#x27;</span> + <span class="built_in">str</span>(count) + <span class="string">&#x27;.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">    boy_file = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\goodb\Desktop\%s&quot;</span> % (file_name_boy), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    girl_file = <span class="built_in">open</span>(<span class="string">r&quot;C:\Users\goodb\Desktop\%s&quot;</span> % (file_name_girl), <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    boy_file.writelines(boy)</span><br><span class="line">    girl_file.writelines(girl)</span><br><span class="line"></span><br><span class="line">    boy_file.close()</span><br><span class="line">    girl_file.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">split_file</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    boy = []</span><br><span class="line">    girl = []</span><br><span class="line"></span><br><span class="line">    f = <span class="built_in">open</span>(file_name)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each_line <span class="keyword">in</span> f:</span><br><span class="line">        <span class="keyword">if</span> each_line[:<span class="number">6</span>] != <span class="string">&#x27;======&#x27;</span>:</span><br><span class="line">            (role, line_spoken) = each_line.split(<span class="string">&#x27;:&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> role == <span class="string">&#x27;小甲鱼&#x27;</span>:</span><br><span class="line">                boy.append(line_spoken)</span><br><span class="line">            <span class="keyword">if</span> role == <span class="string">&#x27;小客服&#x27;</span>:</span><br><span class="line">                girl.append(line_spoken)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            save_file(boy, girl, count)</span><br><span class="line"></span><br><span class="line">            boy = []</span><br><span class="line">            girl = []</span><br><span class="line">            count += <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    save_file(boy, girl, count)</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">split_file(<span class="string">r&quot;C:\Users\goodb\Desktop\record.txt&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>课后作业</p><h1 id="0-编写一个程序，统计当前目录下每个文件类型的文件数，程序实现如图："><a href="#0-编写一个程序，统计当前目录下每个文件类型的文件数，程序实现如图：" class="headerlink" title="0.编写一个程序，统计当前目录下每个文件类型的文件数，程序实现如图："></a>0.编写一个程序，统计当前目录下每个文件类型的文件数，程序实现如图：<img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210421200650.webp" alt="img"></h1><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">all_files = os.listdir(os.curdir)  <span class="comment"># 使用os.curdir表示当前目录更标准</span></span><br><span class="line">type_dict = <span class="built_in">dict</span>()  <span class="comment"># 先定一个空字典来存放&#123;&#x27;后缀名&#x27;: 数量&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each_file <span class="keyword">in</span> all_files:</span><br><span class="line">    <span class="keyword">if</span> os.path.isdir(each_file):</span><br><span class="line">        type_dict.setdefault(<span class="string">&#x27;文件夹&#x27;</span>, <span class="number">0</span>)  <span class="comment"># 当原字典中无该键时，则新增该键和对于的值，并返回键值</span></span><br><span class="line">        type_dict[<span class="string">&#x27;文件夹&#x27;</span>] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ext = os.path.splitext(each_file)[<span class="number">1</span>]  <span class="comment"># 返回的是元组，获取文件的后缀名=ext</span></span><br><span class="line">        type_dict.setdefault(ext, <span class="number">0</span>)</span><br><span class="line">        type_dict[ext] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each_type <span class="keyword">in</span> type_dict.keys():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;该文件夹下共有类型为【%s】的文件 %d 个&#x27;</span> % (each_type, type_dict[each_type]))</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">该文件夹下共有类型为【文件夹】的文件 <span class="number">3</span> 个</span><br><span class="line">该文件夹下共有类型为【.png】的文件 <span class="number">1</span> 个</span><br><span class="line">该文件夹下共有类型为【.py】的文件 <span class="number">1</span> 个</span><br><span class="line">该文件夹下共有类型为【.lnk】的文件 <span class="number">14</span> 个</span><br><span class="line">该文件夹下共有类型为【.pptx】的文件 <span class="number">1</span> 个</span><br><span class="line">该文件夹下共有类型为【.ini】的文件 <span class="number">1</span> 个</span><br><span class="line">该文件夹下共有类型为【.exe】的文件 <span class="number">1</span> 个</span><br></pre></td></tr></table></figure><h1 id="1-编写一个程序，计算当前文件夹下所有文件的大小，程序实现如图："><a href="#1-编写一个程序，计算当前文件夹下所有文件的大小，程序实现如图：" class="headerlink" title="1. 编写一个程序，计算当前文件夹下所有文件的大小，程序实现如图："></a>1. 编写一个程序，计算当前文件夹下所有文件的大小，程序实现如图：</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210421200741.webp" alt="img"></p><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_size</span>():</span></span><br><span class="line">    file_name = os.listdir(os.curdir)</span><br><span class="line">    dict1 = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each_file <span class="keyword">in</span> file_name:</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(each_file):</span><br><span class="line">            dict1.setdefault(each_file, os.path.getsize(each_file))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;%s的大小为：【%d Bytes】&#x27;</span> % (each_file, dict1[each_file]))</span><br><span class="line"></span><br><span class="line">file_size()</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111.</span>py的大小为：【<span class="number">1240</span> Bytes】</span><br><span class="line"><span class="number">1111.</span>py的大小为：【<span class="number">338</span> Bytes】</span><br></pre></td></tr></table></figure><h1 id="2-编写一个程序，用户输入文件名以及开始搜索的路径，搜索该文件是否存在。如遇到文件夹，则进入文件夹继续搜索，程序实现如图："><a href="#2-编写一个程序，用户输入文件名以及开始搜索的路径，搜索该文件是否存在。如遇到文件夹，则进入文件夹继续搜索，程序实现如图：" class="headerlink" title="2. 编写一个程序，用户输入文件名以及开始搜索的路径，搜索该文件是否存在。如遇到文件夹，则进入文件夹继续搜索，程序实现如图："></a>2. 编写一个程序，用户输入文件名以及开始搜索的路径，搜索该文件是否存在。如遇到文件夹，则进入文件夹继续搜索，程序实现如图：</h1><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210421203751.webp" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">答：</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_file</span>(<span class="params">start_dir, target</span>):</span></span><br><span class="line">    os.chdir(start_dir)  <span class="comment"># 切换当前工作目录</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each_file <span class="keyword">in</span> os.listdir(os.curdir):</span><br><span class="line">        <span class="keyword">if</span> each_file == target:</span><br><span class="line">            <span class="built_in">print</span>(os.getcwd() + os.sep + each_file)  <span class="comment"># 使用os.sep使程序更标准</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(each_file):</span><br><span class="line">            search_file(each_file, target)  <span class="comment"># 递归调用</span></span><br><span class="line">            os.chdir(os.pardir)  <span class="comment"># 递归调用后切记返回上一层目录</span></span><br><span class="line"></span><br><span class="line">start_dir = <span class="built_in">input</span>(<span class="string">&#x27;请输入待查找的初始目录：&#x27;</span>)</span><br><span class="line">target = <span class="built_in">input</span>(<span class="string">&#x27;请输入需要查找的目标文件：&#x27;</span>)</span><br><span class="line">search_file(start_dir, target)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">请输入待查找的初始目录：E:\\python</span><br><span class="line">请输入需要查找的目标文件：Linux基础.pdf</span><br><span class="line">E:\python\Linux基础.pdf</span><br><span class="line">E:\python\Python基础班\Python基础班资料\01-基础班-第01天&#123;Linux、以及命令&#125;\1-上课资料\pdf版\Linux基础.pdf</span><br></pre></td></tr></table></figure><ol start="3"><li>编写一个程序，用户输入开始搜索的路径，查找该路径下（包含子文件夹内）所有的视频格式文件（要求查找mp4, rmvb, avi的格式即可），并把创建一个文件（vedioList.txt）存放所有找到的文件的路径，程序实现如图：</li></ol><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210421205536.webp" alt="img"></p><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">vedio_list = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_file</span>(<span class="params">start_dir</span>):</span></span><br><span class="line">    os.chdir(start_dir)</span><br><span class="line">    <span class="keyword">for</span> each_file <span class="keyword">in</span> os.listdir(os.curdir):</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(each_file):</span><br><span class="line">            file_ext = os.path.splitext(each_file)[<span class="number">1</span>]</span><br><span class="line">            <span class="keyword">if</span> file_ext <span class="keyword">in</span> [<span class="string">&#x27;.mp4&#x27;</span>, <span class="string">&#x27;.rmvb&#x27;</span>, <span class="string">&#x27;.avi&#x27;</span>]:</span><br><span class="line">                vedio_list.append(os.getcwd() + os.sep + each_file + os.linesep)</span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(each_file):</span><br><span class="line">            search_file(each_file)  <span class="comment"># 递归调用</span></span><br><span class="line">            os.chdir(os.pardir)  <span class="comment"># 递归调用后切记返回上一层目录</span></span><br><span class="line">    <span class="keyword">return</span> vedio_list</span><br><span class="line"></span><br><span class="line">start_dir = <span class="built_in">input</span>(<span class="string">&#x27;请输入待查找的初始目录：&#x27;</span>)</span><br><span class="line">vedio_list = search_file(start_dir)</span><br><span class="line">f = <span class="built_in">open</span>(os.getcwd() + os.sep + <span class="string">&#x27;VedioList.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">f.writelines(vedio_list)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\<span class="number">123</span>\<span class="number">111</span>.mp4</span><br><span class="line">E:\<span class="number">123</span>\<span class="number">1111</span>\<span class="number">123</span>.avi</span><br><span class="line">E:\<span class="number">123</span>\<span class="number">112</span>\<span class="number">1234</span>\weq.rmvb</span><br></pre></td></tr></table></figure><ol start="4"><li><h2 id="编写一个程序，用户输入关键字，查找当前文件夹内（如果当前文件夹内包含文件夹，则进入文件夹继续搜索）所有含有该关键字的文本文件（-txt后缀），要求显示该文件所在的位置以及关键字在文件中的具体位置（第几行第几个字符），程序实现如图："><a href="#编写一个程序，用户输入关键字，查找当前文件夹内（如果当前文件夹内包含文件夹，则进入文件夹继续搜索）所有含有该关键字的文本文件（-txt后缀），要求显示该文件所在的位置以及关键字在文件中的具体位置（第几行第几个字符），程序实现如图：" class="headerlink" title="编写一个程序，用户输入关键字，查找当前文件夹内（如果当前文件夹内包含文件夹，则进入文件夹继续搜索）所有含有该关键字的文本文件（.txt后缀），要求显示该文件所在的位置以及关键字在文件中的具体位置（第几行第几个字符），程序实现如图："></a>编写一个程序，用户输入关键字，查找当前文件夹内（如果当前文件夹内包含文件夹，则进入文件夹继续搜索）所有含有该关键字的文本文件（.txt后缀），要求显示该文件所在的位置以及关键字在文件中的具体位置（第几行第几个字符），程序实现如图：</h2></li></ol><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210421205621.webp" alt="img"></p><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_pos</span>(<span class="params">key_dict</span>):</span>  <span class="comment"># 负责打印</span></span><br><span class="line">    keys = key_dict.keys()</span><br><span class="line">    keys = <span class="built_in">sorted</span>(keys)  <span class="comment"># 由于字典是无序的，我们这里对行数进行排序</span></span><br><span class="line">    <span class="keyword">for</span> each_key <span class="keyword">in</span> keys:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;关键字出现在第 %s 行，第 %s 个位置。&#x27;</span> % (each_key, <span class="built_in">str</span>(key_dict[each_key])))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pos_in_line</span>(<span class="params">line, key</span>):</span></span><br><span class="line">    pos = []</span><br><span class="line">    begin = line.find(key)</span><br><span class="line">    <span class="keyword">while</span> begin != -<span class="number">1</span>:</span><br><span class="line">        pos.append(begin + <span class="number">1</span>)  <span class="comment"># 用户的角度是从1开始数</span></span><br><span class="line">        begin = line.find(key, begin + <span class="number">1</span>)  <span class="comment"># 从下一个位置继续查找</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pos</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_in_file</span>(<span class="params">file_name, key</span>):</span></span><br><span class="line">    f = <span class="built_in">open</span>(file_name)</span><br><span class="line">    count = <span class="number">0</span>  <span class="comment"># 记录行数</span></span><br><span class="line">    key_dict = <span class="built_in">dict</span>()  <span class="comment"># 字典，用户存放key所在具体行数对应具体位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each_line <span class="keyword">in</span> f:</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">in</span> each_line:</span><br><span class="line">            pos = pos_in_line(each_line, key)  <span class="comment"># key在每行对应的位置</span></span><br><span class="line">            key_dict[count] = pos</span><br><span class="line"></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> key_dict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">search_files</span>(<span class="params">key, detail</span>):</span></span><br><span class="line">    all_files = os.walk(os.getcwd())</span><br><span class="line">    txt_files = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> all_files:</span><br><span class="line">        <span class="keyword">for</span> each_file <span class="keyword">in</span> i[<span class="number">2</span>]:</span><br><span class="line">            <span class="keyword">if</span> os.path.splitext(each_file)[<span class="number">1</span>] == <span class="string">&#x27;.txt&#x27;</span>:  <span class="comment"># 根据后缀判断是否文本文件</span></span><br><span class="line">                each_file = os.path.join(i[<span class="number">0</span>], each_file)</span><br><span class="line">                txt_files.append(each_file)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> each_txt_file <span class="keyword">in</span> txt_files:</span><br><span class="line">        key_dict = search_in_file(each_txt_file, key)</span><br><span class="line">        <span class="keyword">if</span> key_dict:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;================================================================&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;在文件【%s】中找到关键字【%s】&#x27;</span> % (each_txt_file, key))</span><br><span class="line">            <span class="keyword">if</span> detail <span class="keyword">in</span> [<span class="string">&#x27;YES&#x27;</span>, <span class="string">&#x27;Yes&#x27;</span>, <span class="string">&#x27;yes&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="string">&#x27;y&#x27;</span>]:</span><br><span class="line">                print_pos(key_dict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">key = <span class="built_in">input</span>(<span class="string">&#x27;请将该脚本放于待查找的文件夹内，请输入关键字：&#x27;</span>)</span><br><span class="line">detail = <span class="built_in">input</span>(<span class="string">&#x27;请问是否需要打印关键字【%s】在文件中的具体位置（YES/NO）：&#x27;</span> % key)</span><br><span class="line">search_files(key, detail)</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请将该脚本放于待查找的文件夹内，请输入关键字：Linux</span><br><span class="line">请问是否需要打印关键字【Linux】在文件中的具体位置（<span class="literal">YES</span>/<span class="literal">NO</span>）：y</span><br><span class="line">================================================================</span><br><span class="line">在文件【E:\python\study\<span class="number">312</span>\<span class="number">121.</span>txt】中找到关键字【Linux】</span><br><span class="line">关键字出现在第 <span class="number">1</span> 行，第 [<span class="number">6</span>, <span class="number">16</span>] 个位置。</span><br><span class="line">关键字出现在第 <span class="number">2</span> 行，第 [<span class="number">3</span>] 个位置。</span><br><span class="line">关键字出现在第 <span class="number">3</span> 行，第 [<span class="number">7</span>] 个位置。</span><br></pre></td></tr></table></figure><h1 id="5-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"><a href="#5-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！" class="headerlink" title="5.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"></a>5.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！</h1><ul><li>OS模块中关于文件/目录常用的函数使用方法</li></ul><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>getcwd()</td><td>返回当前工作目录</td></tr><tr><td>chdir()</td><td>改变工作目录</td></tr><tr><td>listdir(path=’.’)</td><td>列举指定目录中的文件名（’.’表示当前目录，’..’表示上一级目录）</td></tr><tr><td>mkdir(path)</td><td>创建单层目录，如果目录已存在抛出异常</td></tr><tr><td>makedirs(path)</td><td>递归创建多层目录，如果该目录已存在则抛出异常，注意：’E:\a\b’和’E:\a\c’并不会冲突）</td></tr><tr><td>remove(path)</td><td>删除文件</td></tr><tr><td>rmdir(path)</td><td>删除单层目录，如果该目录非空则抛出异常</td></tr><tr><td>removedirs(path)</td><td>递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常</td></tr><tr><td>rename(old,new)</td><td>将文件old重命名为new</td></tr><tr><td>system(command)</td><td>运行系统的shell命令</td></tr><tr><td>walk(top)</td><td>遍历top参数指定路径下的所有子目录，并将结果返回一个三元组（路径，[目录]，[文件]）</td></tr></tbody></table><p>以下是支持路径操作中常用到的一些定义，支持所有平台</p><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>os.curdir</td><td>指代当前目录</td></tr><tr><td>os.pardir</td><td>指代上一级目录</td></tr><tr><td>os.sep</td><td>输出操作系统特定的路径分隔符（在Windows下为’&#39;，Linux下为’/‘）</td></tr><tr><td>os.linesep</td><td>当前平台使用的行终止符（在Windows下为’\r\n’，Linux下为’\n’）</td></tr><tr><td>os.name</td><td>指代当前使用的操作系统（包括’posix’、’nt’、’mac’、’os2’、’ce’、’java’）</td></tr></tbody></table><ul><li>os.path模块中关于路径常用的函数使用办法</li></ul><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>basename(path)</td><td>去掉目录路径，单独返回文件名</td></tr><tr><td>dirname(path)</td><td>去掉文件名，单独返回目录路径</td></tr><tr><td>join(path1[,path2[,…]])</td><td>将path1和path2各部分组合成一个路径名</td></tr><tr><td>split(path)</td><td>分割文件名和路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在</td></tr><tr><td>splitext(path)</td><td>分离文件名和扩展名，返回(f_name, f_extension)元组。</td></tr><tr><td>getsize(file)</td><td>返回指定文件的尺寸，单位是字节</td></tr><tr><td>getatime(file)</td><td>返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>getctime(file)</td><td>返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr><tr><td>getmtime(file)</td><td>返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</td></tr></tbody></table><p>以下为函数返回True或False</p><table><thead><tr><th>函数名</th><th>使用方法</th></tr></thead><tbody><tr><td>exists(path)</td><td>判断指定路径（目录或文件）是否存在</td></tr><tr><td>isabs(path)</td><td>判断指定路径是否为绝对路径</td></tr><tr><td>isdir(path)</td><td>判断指定路径是否存在且是一个目录</td></tr><tr><td>isfile(path)</td><td>判断指定路径是否存在且是一个文件</td></tr><tr><td>islink(path)</td><td>判断指定路径是否存在且是一个符号链接</td></tr><tr><td>ismount(path)</td><td>判断指定路径是否存在且是一个挂载点</td></tr><tr><td>samefile(path1,path2)</td><td>判断path1和path2两个路径是否指向同一个文件</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">第八章文件</summary>
    
    
    
    <category term="Python" scheme="http://example.com/categories/Python/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python小甲鱼第二十八课：文件：因为懂你，所以更永恒</title>
    <link href="http://example.com/2021/04/20/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%9A%E6%96%87%E4%BB%B6%EF%BC%9A%E5%9B%A0%E4%B8%BA%E6%87%82%E4%BD%A0%EF%BC%8C%E6%89%80%E4%BB%A5%E6%9B%B4%E6%B0%B8%E6%81%92/"/>
    <id>http://example.com/2021/04/20/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%BA%8C%E5%8D%81%E5%85%AB%E8%AF%BE%EF%BC%9A%E6%96%87%E4%BB%B6%EF%BC%9A%E5%9B%A0%E4%B8%BA%E6%87%82%E4%BD%A0%EF%BC%8C%E6%89%80%E4%BB%A5%E6%9B%B4%E6%B0%B8%E6%81%92/</id>
    <published>2021-04-20T09:42:20.841Z</published>
    <updated>2021-04-22T01:48:39.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-下边只有一种方式不能打开文件，请问是哪一种，为什么？"><a href="#0-下边只有一种方式不能打开文件，请问是哪一种，为什么？" class="headerlink" title="0.  下边只有一种方式不能打开文件，请问是哪一种，为什么？"></a>0.  下边只有一种方式不能打开文件，请问是哪一种，为什么？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:/test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="comment">#A</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:\test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="comment">#B</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E://test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="comment">#C</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f = <span class="built_in">open</span>(<span class="string">&#x27;E:\\test.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>) <span class="comment">#D</span></span><br></pre></td></tr></table></figure><p>答：B不能打开文件。<br> Windows在路径名中既可以接受斜线（/）也可以接受反斜线（\），不过如果使用反斜线作为路径名的分隔符的话，要注意使用双<br> 行转义，否则Python会将反斜线进行转义，例如（\n）看成一个换行符，（\t）看作一个制表符等。</p><h1 id="1-打开一个文件我们使用open-函数，通过设置文件的打开模式，决定打开的文件具有那些性质，请问默认的打开模式是什么呢？"><a href="#1-打开一个文件我们使用open-函数，通过设置文件的打开模式，决定打开的文件具有那些性质，请问默认的打开模式是什么呢？" class="headerlink" title="1.  打开一个文件我们使用open()函数，通过设置文件的打开模式，决定打开的文件具有那些性质，请问默认的打开模式是什么呢？"></a>1.  打开一个文件我们使用open()函数，通过设置文件的打开模式，决定打开的文件具有那些性质，请问默认的打开模式是什么呢？</h1><p>答：open()函数默认的打开模式是’ rt’，即可读、文本的模式打开。</p><hr><h1 id="2-请问-gt-gt-gt-open-‘-E-Test-bin’-‘-xb’-是以什么样的模式打开文件的？"><a href="#2-请问-gt-gt-gt-open-‘-E-Test-bin’-‘-xb’-是以什么样的模式打开文件的？" class="headerlink" title="2.  请问 &gt;&gt;&gt; open(‘ E: \Test.bin’ ,  ‘ xb’ ) 是以什么样的模式打开文件的？"></a>2.  请问 &gt;&gt;&gt; open(‘ E: \Test.bin’ ,  ‘ xb’ ) 是以什么样的模式打开文件的？</h1><p>答：以“可写入以及二进制模式”打来文件“E:\Test.bin”。<br> 这里要注意的是’ x’和’ w’均是以“可写入”的模式打开文件，但以’ x’模式打开的时候，如果路径下已经存在相同的文件名，会抛出异常，而’w’模式的话会直接覆盖同名文件。<br> 因此，’ w’模式打开文件会比较危险，容易导致此前的内容遗失，因此使用’ w’模式打开文件前先检查该文件名是否已经存在显得非常重要！下节课小甲鱼会教你如何安全的打开一个文件。</p><hr><h1 id="3-尽管Python有所谓的“垃圾回收机制”，但对于打开了的文件，在不需要用到的时候我们仍然使用f-close-将文件对象“关闭”，这是为什么呢？"><a href="#3-尽管Python有所谓的“垃圾回收机制”，但对于打开了的文件，在不需要用到的时候我们仍然使用f-close-将文件对象“关闭”，这是为什么呢？" class="headerlink" title="3.尽管Python有所谓的“垃圾回收机制”，但对于打开了的文件，在不需要用到的时候我们仍然使用f. close()将文件对象“关闭”，这是为什么呢？"></a>3.尽管Python有所谓的“垃圾回收机制”，但对于打开了的文件，在不需要用到的时候我们仍然使用f. close()将文件对象“关闭”，这是为什么呢？</h1><p>答：Python拥有垃圾收集机制，会在文件对象的引用计数降至零的时候自动关闭文件，所以在Python编程里，如果忘记关闭文件并不会带来什么危险。<br> 但并不是说就可以不要关闭文件，如果你对文件进行了写入操作，那么你应该在完成写入之后进行关闭文件。因为Python可能会缓存你写入文件中的数据，如果这中间断电了神马的，那些缓存的数据根本就不会写入到文件中。所以，为了安全起见，要养成使用完文件后立刻关闭的优雅习惯。</p><hr><h1 id="4-如何将一个文件对象（f）中的数据存放进列表中？"><a href="#4-如何将一个文件对象（f）中的数据存放进列表中？" class="headerlink" title="4.  如何将一个文件对象（f）中的数据存放进列表中？"></a>4.  如何将一个文件对象（f）中的数据存放进列表中？</h1><p>答：list(f)即可。</p><hr><h1 id="5-如何迭代打印出文件对象（f）中的每一行数据？"><a href="#5-如何迭代打印出文件对象（f）中的每一行数据？" class="headerlink" title="5.  如何迭代打印出文件对象（f）中的每一行数据？"></a>5.  如何迭代打印出文件对象（f）中的每一行数据？</h1><p>答：直接使用for语句把文件对象迭代出来即可：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f.seek(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(each_line)</span><br></pre></td></tr></table></figure><hr><h1 id="6-文件对象的内置方法f-read-size-1-作用是读取文件对象内容，size参数是可选的，那如果设置了size-10，例如f-read-10-，将返回什么？"><a href="#6-文件对象的内置方法f-read-size-1-作用是读取文件对象内容，size参数是可选的，那如果设置了size-10，例如f-read-10-，将返回什么？" class="headerlink" title="6.  文件对象的内置方法f. read([size=-1])作用是读取文件对象内容，size参数是可选的，那如果设置了size=10，例如f. read(10)，将返回什么？"></a>6.  文件对象的内置方法f. read([size=-1])作用是读取文件对象内容，size参数是可选的，那如果设置了size=10，例如f. read(10)，将返回什么？</h1><p>答：将返回从文件指针开始**$\textcolor{red}{(注意这里并不是文件头哦)} $**的连续10个字符。</p><hr><h1 id="7-如何获得文件对象（f）当前文件指针的位置？"><a href="#7-如何获得文件对象（f）当前文件指针的位置？" class="headerlink" title="7.如何获得文件对象（f）当前文件指针的位置？"></a>7.如何获得文件对象（f）当前文件指针的位置？</h1><p>答：f.tell()即可。</p><hr><h1 id="8-还是视频中的那个演示文件（record-txt），请问为何f-seek-45-0-不会出错，但f-seek-46-就出错了呢？"><a href="#8-还是视频中的那个演示文件（record-txt），请问为何f-seek-45-0-不会出错，但f-seek-46-就出错了呢？" class="headerlink" title="8.  还是视频中的那个演示文件（record. txt），请问为何f. seek(45,  0)不会出错，但f. seek(46)就出错了呢？"></a>8.  还是视频中的那个演示文件（record. txt），请问为何f. seek(45,  0)不会出错，但f. seek(46)就出错了呢？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.seek(<span class="number">46</span>)</span><br><span class="line"><span class="number">46</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>f.readline()</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">    Flie <span class="string">&quot;&lt;pyshell#18&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">        f.readline()</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;gbk&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xe3 in possition 4:illegal multibyte sequence</span></span><br></pre></td></tr></table></figure><p>答：因为使用f. seek()定位的文件指针是按字节为单位进行计算的，演示文件（record. txt）是以GBK进行编码的，按照规则，一个汉字需要两个字节，f. seek(45)的位置位于字符“小”的开始位置，因此可以正常打印，而f. seek(46)的位置刚好位于字符“小”的中间位置，因此按照GBK的编码规则将无法将其解码！</p><hr><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><h1 id="0-试尝试将文件（OpenMe-mp3）打印到屏幕上。"><a href="#0-试尝试将文件（OpenMe-mp3）打印到屏幕上。" class="headerlink" title="0.试尝试将文件（OpenMe.mp3）打印到屏幕上。"></a>0.试尝试将文件（<a href="https://pan.baidu.com/s/1WyIaK3hVjYKj3PKymlt8iw">OpenMe.mp3</a>）打印到屏幕上。</h1><p>答：直接使用打开文本文件的形式打开即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;OpenMe.mp3&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> f:</span><br><span class="line">    <span class="built_in">print</span>(each_line , end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">长期使用Windows操作系统的朋友很容易被扩展名所误导，认为扩展名决定文件类型，其实这种观念是错误的！</span><br><span class="line"></span><br><span class="line">其实这就跟一个姓张的坏人，尽管把名字改为了“张好人”，但他还是一个坏人是一个道理的^_^</span><br><span class="line"></span><br><span class="line">关于文件的扩展名，初学者容易走进的误区：</span><br><span class="line"></span><br><span class="line">误区一：文件扩展名是一个文件的必要构成部分</span><br><span class="line"></span><br><span class="line">一个文件可以有或没有扩展名，对于打开文件操作，没有扩展名的文件需要选择程序去打开它，有扩展名的文件会自动用设置好的程序（如有）去尝试打开（是“尝试打开”，而不是“打开”的原因参看下面的第<span class="number">2</span>个误区），文件扩展名是一个常规文件的构成部分，但一个文件并不一定需要一个扩展名。</span><br><span class="line"></span><br><span class="line">误区二：文件扩展名表明了该文件是何种类型</span><br><span class="line"></span><br><span class="line">文件扩展名可以人为设定，扩展名为TXT的文件有可能是一张图片，同样，扩展名为M-P3的文件，依然可能是一个视频。</span><br></pre></td></tr></table></figure><hr><h1 id="1-编写代码，将上一题中的文件（OpenMe-mp3）保存为新文件（OpenMe-txt）"><a href="#1-编写代码，将上一题中的文件（OpenMe-mp3）保存为新文件（OpenMe-txt）" class="headerlink" title="1.  编写代码，将上一题中的文件（OpenMe.mp3）保存为新文件（OpenMe. txt）"></a>1.  编写代码，将上一题中的文件（OpenMe.mp3）保存为新文件（OpenMe. txt）</h1><p>答：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种方法：</span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;D:\\Python\Python3\OpenMe.mp3&#x27;</span>)</span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&#x27;D:\\Python\Python3\OpenMe.txt&#x27;</span>,<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> each_line <span class="keyword">in</span> f1:</span><br><span class="line">    f2.write(each_line)</span><br><span class="line">f1.close()</span><br><span class="line">f2.close()</span><br><span class="line"></span><br><span class="line"><span class="comment">#第二种方法</span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;D:\\Python\Python3\OpenMe.mp3&#x27;</span>)</span><br><span class="line">f2 = <span class="built_in">open</span>(<span class="string">&#x27;D:\\Python\Python3\OpenMe2.txt&#x27;</span>,<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line">f2.write(f1.read())</span><br><span class="line">f1.close()</span><br><span class="line">f2.close() </span><br></pre></td></tr></table></figure><hr><h1 id="2-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"><a href="#2-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！" class="headerlink" title="2.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"></a>2.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！</h1><ul><li>利用help(open)可以看到open()函数的定义：open(file,mode=’r’,buffering=1,encoding=None,errors=None,newline=None,closefd=True,opener=None)<br> 默认打开模式是’rt’，也就是只读和文本模式。</li></ul><table><thead><tr><th>打开模式</th><th>执行操作</th></tr></thead><tbody><tr><td>‘r’</td><td>以只读方式打开文件（默认）</td></tr><tr><td>‘w’</td><td>以写入的方式打开文件，会覆盖已存在的文件（有风险**）</td></tr><tr><td>‘x’</td><td>如果文件已经存在，使用此模式打开将引发异常</td></tr><tr><td>‘a’</td><td>以写入模式打开，如果文件存在，则在末尾追加写入</td></tr><tr><td>‘b’</td><td>以二进制模式打开文件</td></tr><tr><td>‘t’</td><td>以文本模式打开（默认）</td></tr><tr><td>‘+’</td><td>可读写模式（可添加到其他模式中使用）</td></tr><tr><td>‘U’</td><td>通用换行符支持</td></tr></tbody></table><ul><li>文件对象的方法</li></ul><table><thead><tr><th>文件对象的方法</th><th align="left">执行操作</th></tr></thead><tbody><tr><td>close()</td><td align="left">关闭文件</td></tr><tr><td>read(size=-1)</td><td align="left">从文件读取size个字符（单位是字节，中文算2个字节），当未给定size或给定负值的时候，读取剩余的所有字符，然后作为字符串返回（注意这里的读取是从文件指针开始读取，而不是从初始位置）</td></tr><tr><td>readline()</td><td align="left">从文件中读取一整行字符串（包括末尾的换行’\n’）</td></tr><tr><td>write(str)</td><td align="left">将字符串str写入文件</td></tr><tr><td>writelines(seq)</td><td align="left">向文件写入字符串序列seq，seq应该是一个返回字符串的可迭代对象</td></tr><tr><td>seek(offset, from)</td><td align="left">在文件中移动文件指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节</td></tr><tr><td>tell()</td><td align="left">返回当前文件指针在文件中的位置</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打开文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;D:\Python\Python3\c.txt&quot;</span>, <span class="string">&quot;x&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;文件名为: &quot;</span>, fo.name)</span><br><span class="line">seq = [<span class="string">&quot;菜鸟教程 1\n&quot;</span>, <span class="string">&quot;菜鸟教程 2&quot;</span>]</span><br><span class="line">fo.writelines( seq )  </span><br><span class="line"><span class="comment"># 关闭文件</span></span><br><span class="line">fo.close()</span><br><span class="line"><span class="comment"># 输出就是写入以下内容到c.txt中：</span></span><br><span class="line">菜鸟教程 <span class="number">1</span></span><br><span class="line">菜鸟教程 <span class="number">2</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-下边只有一种方式不能打开文件，请问是哪一种，为什么？&quot;&gt;&lt;a href=&quot;#0-下边只有一种方式不能打开文件，请问是哪一种，为什么？&quot; class=&quot;headerlink&quot; title=&quot;0.  下边只有一种方式不能打开文件，请问是哪一种，为什么？&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python小甲鱼第二十七课：集合：在我的世界里，你就是唯一</title>
    <link href="http://example.com/2021/04/20/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%9A%E9%9B%86%E5%90%88%EF%BC%9A%E5%9C%A8%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E9%87%8C%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%94%AF%E4%B8%80/"/>
    <id>http://example.com/2021/04/20/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC%E4%BA%8C%E5%8D%81%E4%B8%83%E8%AF%BE%EF%BC%9A%E9%9B%86%E5%90%88%EF%BC%9A%E5%9C%A8%E6%88%91%E7%9A%84%E4%B8%96%E7%95%8C%E9%87%8C%EF%BC%8C%E4%BD%A0%E5%B0%B1%E6%98%AF%E5%94%AF%E4%B8%80/</id>
    <published>2021-04-20T08:20:23.655Z</published>
    <updated>2021-04-22T01:48:35.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0-请问集合的唯一作用是什么呢？"><a href="#0-请问集合的唯一作用是什么呢？" class="headerlink" title="0.请问集合的唯一作用是什么呢？"></a>0.请问集合的唯一作用是什么呢？</h1><p>答：集合几乎所有的作用就是确保里边包含的元素的唯一性，就像世界上没有两片完全相同的树叶一样，集合内不可能存在两个相同的元素！</p><hr><h1 id="1-如果你希望创建的集合是不变的，应该怎么做？"><a href="#1-如果你希望创建的集合是不变的，应该怎么做？" class="headerlink" title="1. 如果你希望创建的集合是不变的，应该怎么做？"></a>1. 如果你希望创建的集合是不变的，应该怎么做？</h1><p>答：frozenset()</p><hr><h1 id="2-请问如何确定一个集合里边有多少个元素？"><a href="#2-请问如何确定一个集合里边有多少个元素？" class="headerlink" title="2. 请问如何确定一个集合里边有多少个元素？"></a>2. 请问如何确定一个集合里边有多少个元素？</h1><p>答：没错，len()函数正好可以满足你此刻的需求。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>num_set = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(num_set)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">set</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">len</span>(<span class="params">num_set</span>)</span></span><br><span class="line"><span class="class">5</span></span><br></pre></td></tr></table></figure><h1 id="3-请目测以下代码会打印什么内容？"><a href="#3-请目测以下代码会打印什么内容？" class="headerlink" title="3. 请目测以下代码会打印什么内容？"></a>3. 请目测以下代码会打印什么内容？</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>num_set = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>num_set[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>答：会报错，因为集合是无序的。<code>TypeError: &#39;set&#39; object does not support indexing</code></p><h1 id="4-请问-set1-1-2-和-set1-set-1-2-执行的结果一样吗？"><a href="#4-请问-set1-1-2-和-set1-set-1-2-执行的结果一样吗？" class="headerlink" title="4. 请问 set1 = {[1, 2]} 和 set1 = set([1, 2]) 执行的结果一样吗？"></a>4. 请问 set1 = {[1, 2]} 和 set1 = set([1, 2]) 执行的结果一样吗？</h1><p>答：不一样，set1 = set([1, 2]) 会生成一个集合{1, 2}，但set1 = {[1, 2]}却会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = &#123;[<span class="number">1</span>,<span class="number">2</span>]&#125;</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#7&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    set1 = &#123;[<span class="number">1</span>,<span class="number">2</span>]&#125;</span><br><span class="line">TypeError: unhashable <span class="built_in">type</span>: <span class="string">&#x27;list&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>set1 = <span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">type</span>(set1)</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">set</span>&#x27;&gt;</span></span><br><span class="line"><span class="class">&gt;&gt;&gt; <span class="title">print</span>(<span class="params">set1</span>)</span></span><br><span class="line">&#123;1, 2&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span></span><br></pre></td></tr></table></figure><p>从报错信息上我们看到“列表不是可哈希类型”，没错，列表是可变的，它怎么可以哈希呢？！咦，等等，这句话好像<br> 在那听过……呃，敢情集合跟字典的存储方式一样的丫！<br> 其实你再想想就会觉得很有道理，利用哈希函数计算，相同的元素得到的哈希值（存放地址）是相同的，所以在集合中<br> 所有相同的元素都会覆盖掉，因此有了集合的唯一性。<br> 然后你继续接着想就觉得更有道理了，通过哈希函数计算的地址不可能是按顺序排放的，所以集合才强调是无序的！</p><h1 id="5-打开你的IDLE，输入set1-1-1-0-，你发现了什么？"><a href="#5-打开你的IDLE，输入set1-1-1-0-，你发现了什么？" class="headerlink" title="5. 打开你的IDLE，输入set1 = {1, 1.0}，你发现了什么？"></a>5. 打开你的IDLE，输入set1 = {1, 1.0}，你发现了什么？</h1><p>答：没错， 集合内容是{1.0}，其实你弄懂了上一题，这一题一样容易：因为在Python的哈希函数会将相同的值的元素计算得到相同的地址，所以1和1.0是等值的。</p><h1 id="6-请问如何给集合添加和删除元素？"><a href="#6-请问如何给集合添加和删除元素？" class="headerlink" title="6. 请问如何给集合添加和删除元素？"></a>6. 请问如何给集合添加和删除元素？</h1><p>答：使用add()方法可以为集合添加元素，使用remove()方法可以删除集合中已知的元素。</p><hr><h1 id="7-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"><a href="#7-请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！" class="headerlink" title="7.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！"></a>7.请写下这一节课你学习到的内容：格式不限，回忆并复述是加强记忆的好方式！</h1><ul><li>集合的创建 set1 = {1,2,3,4,5}，注意，集合中重复的元素会被自动剔除。</li><li>集合是无序的，不支持索引。</li><li>可以利用工厂函数set()来创建一个集合：set2 = set([1,2,3,4,5])</li><li>如何访问集合中的值：<br> for语句进行遍历 ；in/not in 判断是否在集合中；add()添加；remove()移除</li><li>不可变集合：用frozenset()来创建，其不可添加元素也不可移除已有元素。</li></ul><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420164818.webp" alt="img"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;0-请问集合的唯一作用是什么呢？&quot;&gt;&lt;a href=&quot;#0-请问集合的唯一作用是什么呢？&quot; class=&quot;headerlink&quot; title=&quot;0.请问集合的唯一作用是什么呢？&quot;&gt;&lt;/a&gt;0.请问集合的唯一作用是什么呢？&lt;/h1&gt;&lt;p&gt;答：集合几乎所有的作用就是确</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>An online multi-channel SSVEP-based brain–computer interface using a anonical correlation analysis method</title>
    <link href="http://example.com/2021/04/20/%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%A4%9A%E9%80%9A%E9%81%93SSVEP%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2021/04/20/%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E7%9A%84%E5%9C%A8%E7%BA%BF%E5%A4%9A%E9%80%9A%E9%81%93SSVEP%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-04-20T03:36:36.710Z</published>
    <updated>2021-04-21T13:02:28.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><h2 id="1-研究目标"><a href="#1-研究目标" class="headerlink" title="1. 研究目标"></a>1. 研究目标</h2><h2 id="2-研究背景及问题陈述"><a href="#2-研究背景及问题陈述" class="headerlink" title="2. 研究背景及问题陈述"></a>2. 研究背景及问题陈述</h2><p>近年来，稳态视觉诱发电位(SSVEP)在脑机接口(BCI)系统中的应用受到越来越多的关注。然而，当前基于SSVEP的BCI系统的几个方面需要改进，特别是在速度、用户变化和易用性方面。考虑到这些改进，本文提出了一种基于典型相关分析(CCA)方法提取与SSVEP相关的频率信息的在线多通道SSVEP脑机接口系统。利用离线数据对通道位置、窗口长度和谐波个数等关键参数进行了研究，并将结果用于指导在线系统的设计。基于SSVEP的脑机接口系统有6个目标，使用枕叶和顶叶的9个通道位置，窗口长度为2s，一次谐波，对12名受试者进行在线测试。结果表明，该系统具有较高的性能，平均准确率为95.3%，信息传输速率为58±9.6$bit min^{−1}$。该系统的优点是不需要信道选择和参数优化，可以利用谐波频率，用户变化小，易于设置。</p><p>SSVEP是对以高于6 Hz的频率调制的视觉刺激的周期性反应[4]。它与视觉刺激的基频相同，其谐波也相同。SSVEP可以从视觉皮层上方的头皮表面记录到。</p><p>近年来，在脑-机接口系统中使用SSVEP越来越引起人们的兴趣[5-10，18-21]。在基于SSVEP的脑机接口系统中，多个不同频率编码的刺激出现在视野中。通过将我们的兴趣或注意力转移到一系列频率编码刺激中的一种，可以产生不同的SSVEP。与其他BCI系统相比，基于SSVEP的BCI具有许多优点，包括更高的信噪比(SNR)和信息传输率(ITR)。此外，由于SSVEP是大脑的一种固有反应，因此只需要很少的训练就能使一个人操作BCI。基于SSVEP的脑-机接口的这些优点使其成为脑-机接口应用中一种很有前途的选择。但是，以前的基于SSVP的脑机接口系统在速度、用户多样性和易用性等方面都有待改进。</p><p>本人注：与前一篇<a href="https://zyxaxx.github.io/2021/04/14/%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84BCI%E9%A2%91%E7%8E%87%E8%AF%86%E5%88%AB/">Frequency Recognition Based on Canonical Correlation Analysis for SSVEP-Based BCIs</a> 的文章（出自同一实验室）相比，分析了多通道。<br>         本文提出了一种基于SSVEP的在线六目标脑-机接口。采用不需要通道位置选择和参数优化的CCA方法从多通道脑电信号中提取频率信息，并使用LCD监视器作为刺激。在线测试表明，本文提出的脑机接口系统具有较强的实用性和较高的性能。</p><h2 id="3-研究方法"><a href="#3-研究方法" class="headerlink" title="3. 研究方法"></a>3. 研究方法</h2><p>基于SSVEP的脑-机接口中的CCA方法</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420152918.png" alt="image-20210420152918274"></p><p>图1.CCA在EEG信号分析中的用法说明。X为多通道EEG信号。$Y_F$是具有f Hz刺激频率的参考信号。</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420153218.png" alt="image-20210420153218411"></p><p>ρ相对于Wx和Wy的最大值是最大典型相关。在Wx和Wy上的投影，即x和y，称为正则变体。</p><p>Lin等人[11]首先提出了使用CCA方法进行多通道SSVEP检测。我们的系统也采用了类似的方法。图1说明了CCA在基于SSVEP的BCI的频率识别中的使用，其中有K个目标，刺激频率分别为f1、f2、…、fk。X是指NTS长的多通道EEG信号的集合，而参考性$Y_f$是指与X具有相同长度的参考信号的集合。参考信号$Y_f$被设置为</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420153514.png" alt="image-20210420153514505"></p><p>其中$N_h$是谐波的数量。多通道EEG信号和每个参考信号被用作CCA方法的输入。输出的典型相关ρ可用于频率识别。</p><p>用户的命令C被识别为</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420154129.png" alt="image-20210420154129807"></p><p>其中$ρ_i$是以参考信号的频率为f1、f2、…、fk获得的CCA系数。</p><h2 id="4-评估，实验"><a href="#4-评估，实验" class="headerlink" title="4. 评估，实验"></a>4. 评估，实验</h2><p>在基于SSVEP的脑机接口系统中，有三个重要参数：<strong>信道位置、窗口长度T和谐波个数$N_H$<strong>。</strong>离线分析的目的是研究这三个参数对所提出的脑机接口系统性能的影响。</strong></p><p>离线数据来自清华大学的EEG数据库。该数据库是为算法研究而建立的。这些数据来自6名视力正常或矫正视力正常的健康右撇子成年人。受试者坐在一张舒适的椅子上，在一个屏蔽的录音室里。6个正方形发光二极管(LED)分别以13 Hz、14 Hz、15 Hz、16 Hz、17 Hz和18 Hz(即K=6)的频率闪烁，起到视觉刺激器的作用。LED的亮度由方波调制。每个受试者进行6次试验运行，其间休息3次。在每次运行中，受试者被要求注视6个LED的每一个8秒。因此，每个受试者在每个刺激频率下都获得了6段8秒的数据。</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><h2 id="6-笔记"><a href="#6-笔记" class="headerlink" title="6. 笔记"></a>6. 笔记</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
    <summary type="html">基于典型相关分析的在线多通道SSVEP脑机接口(2009年5月6日)</summary>
    
    
    
    <category term="论文" scheme="http://example.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="CCA" scheme="http://example.com/tags/CCA/"/>
    
    <category term="SSVEP" scheme="http://example.com/tags/SSVEP/"/>
    
  </entry>
  
  <entry>
    <title>A high-speed BCI based on code modulation VEP</title>
    <link href="http://example.com/2021/04/15/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9F%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2021/04/15/%E4%B8%80%E7%A7%8D%E5%9F%BA%E4%BA%8E%E7%BC%96%E7%A0%81%E8%B0%83%E5%88%B6VEP%E7%9A%84%E9%AB%98%E9%80%9F%E8%84%91%E6%9C%BA%E6%8E%A5%E5%8F%A3/</id>
    <published>2021-04-15T09:22:35.425Z</published>
    <updated>2021-04-20T02:32:05.085Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p><h2 id="1-研究目标"><a href="#1-研究目标" class="headerlink" title="1. 研究目标"></a>1. 研究目标</h2><p>本文提出了一种基于视觉诱发电位编码调制(c-VEP)的高速脑机接口。32个目标刺激由时移二进制伪随机序列调制。采用基于典型相关分析(CCA)的多通道识别方法进行目标识别。</p><h2 id="2-研究背景及问题陈述"><a href="#2-研究背景及问题陈述" class="headerlink" title="2. 研究背景及问题陈述"></a>2. 研究背景及问题陈述</h2><p>基于视觉诱发电位(VEP)的脑机接口(BCI)因其用户训练少、使用方便、ITR高等优点而受到越来越多的关注。与其他类型的基于视觉诱发电位的脑梗死相比，c-VEP脑梗死具有许多优点，包括增加了目标数目(16个目标)和更高的信噪比(92.8士14.1bitmin−1）</p><h2 id="3-研究方法"><a href="#3-研究方法" class="headerlink" title="3. 研究方法"></a>3. 研究方法</h2><h3 id="3-1-系统配置"><a href="#3-1-系统配置" class="headerlink" title="3.1 系统配置"></a>3.1 系统配置</h3><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416110149.png" alt="image-20210416102210407"></p><p>图1.c-VEP脑机接口的框图</p><p>采用亮暗交替的的刺激，二进制序列可以用作调制序列。在二进制序列中，“亮”和“暗”分别表示为“1”和“0”。</p><h3 id="3-2目标识别"><a href="#3-2目标识别" class="headerlink" title="3.2目标识别"></a>3.2目标识别</h3><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416111208.png" alt="image-20210416111208471"></p><p>图2。(A)基于c-VEP的脑机接口的目标排列。这32个目标以4×8( 屏幕中央的灰色区域)的形式分布，周围环绕着28个互补的闪光灯(白色背景)，这32个目标被28个互补的闪光灯(白色背景)包围着。目标上的数字表示目标的索引。互补的非目标与具有相同数字的目标同步。(B)一个刺激周期内32个靶点的调制序列。所有靶点同时激活，刺激周期不断重复。在两个连续的目标之间有两帧的时间间隔。</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416145958.png" alt="image-20210416145958634"></p><p>图3获得T0的刺激序列，通过对T0序列循环移位来获得所有刺激模块的信号</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416112115.png" alt="image-20210416112115532"></p><p>图4.目标识别的示例。在凝视目标T21期间记录要识别的数据，并且红星指示识别结果（相关系数最大）。</p><p>在获得所有目标的模板后，可以使用模板匹配方法进行目标识别。图4显示了模板匹配过程的框架。目标识别过程的步骤如下。</p><p>（1）在训练阶段，用户需要专注于参考目标。在我们的实验中，参考目标是目标T20。N个刺激周期内的脑电数据采集为xn(T)，n=1，2，…，N。</p><p>（2）参考模板MR(T)是通过在k个周期上求平均来获得的。在我们的实验中，参考模板是T20的模板，即$M_{20}$(T)：</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416154001.png" alt="image-20210416154001462"></p><p>(3)所有目标的模板都是通过移动参考模板得到的：<img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416154034.png" alt="image-20210416154034628"></p><p>其中$τ_k−τ_{20}$表示目标k和参考目标$T_{20}$之间的时间滞后。</p><p>(4)对于一段脑电数据x(t)，x(t)和模板$M_k(t)$之间的相关系数$ρ_k$被计算为</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416154220.png" alt="image-20210416154220328"></p><p>&lt;x,y&gt;表示x和y的乘积   </p><p>（5）通过选择相关系数最大的目标来识别固定目标。</p><p>通过VC++开发的在线分析程序进行目标识别</p><h3 id="3-3-多通道处理"><a href="#3-3-多通道处理" class="headerlink" title="3.3 多通道处理"></a>3.3 多通道处理</h3><p>以前采用穷举法，现在采用CCA分析</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416155837.png" alt="image-20210416155837878"></p><p>在实际应用中，我们采用Wx作为空间滤波系数进行在线数据处理。在我们的系统中，我们选择了枕区的9个电极(O1、Oz、O2、P3、Pz、P4、PO7、POZ和PO8)。</p><h2 id="4-评估，实验"><a href="#4-评估，实验" class="headerlink" title="4. 评估，实验"></a>4. 评估，实验</h2><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420101342.png" alt="image-20210420101342183"><br>图5.等效邻居原理的图解。(A)蓝色方框标记两个目标(T9和T30)，红色虚线方框表示两个目标的八个邻居。(B)邻居和目标之间的时间滞后(符号‘+’表示‘领先’，符号‘−’表示‘落后’)。例如，T9的左侧邻居是T8，其时间延迟为τ，即T9。所以左边邻居的时间滞后是+$τ_s$。</p><p>分别对16个靶和32个靶的两个系统进行了测试。五名视力正常或矫正正常的健康成年人在知情同意后参加了实验。他们是从有脑机接口实验经验的受试者中随机挑选出来的。对于每个系统，实验分为训练阶段和测试阶段。在训练阶段，受试者被要求专注于参考目标大约200个刺激期。训练阶段的数据被用于离线分析，以计算空间滤波器权重和供在线使用的参考模板。在测试阶段，每个受试者被要求输入64个字符的序列。使用在线准确率和相应的ITR来评估系统性能。在ITR的计算中，每个选择的时间成本为2.1s(包括两个刺激期，一个用于数据采集，另一个用于目标识别、反馈呈现和注视转移)。</p><p>来自我们先前研究的一个涉及12个受试者的数据集被用来测试多通道方法的性能[5]。在16个目标c-VEP脑机接口的训练阶段，测量了47个位于顶枕叶皮质上的脑电信号。</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420100823.png" alt="image-20210420100815520"></p><p>表1比较了每个对象的最优双极方法和多通道方法的训练精度。在10%的显著性水平上，多通道方法的平均训练准确率显著高于最优双极方法(平均：95%对98%，p=0.06)。</p><p>表2列出了两个c-VEP脑机接口系统的测试结果。虽然32靶系统的在线准确率低于16靶系统(85±5%，92±3%，p=0.04)，但32靶系统的ITR优于16靶系统(108±12.0bits$min^{−1}$，96±6.3bits$min^{−1}$，p=0.08)。对于单个受试者，在32个靶点的系统中，最大ITR值为123bits$min^{−1}$。</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210420102832.png" alt="image-20210420102832757"></p><p>如表2所示，32个目标系统的平均ITR值明显高于16个目标系统(108bit最小−1与96位最小−1)。对于受试者s13、s14和s17，增量约为20位最小−1。然而，其他两个受试者在两个系统之间没有明显差异(分别为93位最小−1与96位最小−1和104bits$min^{−1}$与96bits$min^{−1}$，s15和s16分别为96bits$min^{−1}$和96bits$min^{−1}$)。当使用更多目标时，两个受试者的在线准确率显著下降(在16个目标系统中分别为91%和95%，而在32个目标系统中分别为80%)。精确度的降低可能是由于模板的非锐化自相关功能造成的。对于32个目标系统和16个目标系统，两个连续目标之间的时间间隔分别为2帧(33.3ms)和4帧(66.7ms)。因此，当模板的自相关函数不够尖锐时，对于较短的时间滞后，目标可能更容易被误识别</p><h2 id="6-笔记"><a href="#6-笔记" class="headerlink" title="6. 笔记"></a>6. 笔记</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
    <summary type="html">一种基于编码调制VEP的高速脑机接口</summary>
    
    
    
    <category term="论文" scheme="http://example.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="CCA" scheme="http://example.com/tags/CCA/"/>
    
    <category term="c-VEP" scheme="http://example.com/tags/c-VEP/"/>
    
  </entry>
  
  <entry>
    <title>Frequency Recognition Based on Canonical Correlation Analysis for SSVEP-Based BCIs</title>
    <link href="http://example.com/2021/04/14/%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84BCI%E9%A2%91%E7%8E%87%E8%AF%86%E5%88%AB/"/>
    <id>http://example.com/2021/04/14/%E5%9F%BA%E4%BA%8E%E5%85%B8%E5%9E%8B%E7%9B%B8%E5%85%B3%E5%88%86%E6%9E%90%E7%9A%84%E5%9F%BA%E4%BA%8ESSVEP%E7%9A%84BCI%E9%A2%91%E7%8E%87%E8%AF%86%E5%88%AB/</id>
    <published>2021-04-14T04:43:42.247Z</published>
    <updated>2021-04-20T02:31:49.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p><h2 id="1-研究目标"><a href="#1-研究目标" class="headerlink" title="1. 研究目标"></a>1. 研究目标</h2><p>采用典型相关分析（Canonical correlation analysis，CCA）对脑电中稳态视觉诱发电位（steady-state visual evoked potentials，SSVEP）进行频率分析。</p><h2 id="2-研究背景及问题陈述"><a href="#2-研究背景及问题陈述" class="headerlink" title="2. 研究背景及问题陈述"></a>2. 研究背景及问题陈述</h2><p>在SSVEP的BCI中使用最广泛的频率检测方法是基于功率谱密度的分析（ power spectral density based analysis，PSDA），在时间窗口内从用户的EEG信号估计功率谱密度，并随后检测其峰值。将与该峰值对应的频率作为视觉刺激频率。周期图是一种非参数功率谱估计方法，可以直接从离散傅立叶变换(DFT)计算。因此，可以利用快速傅立叶变换(FFT)进行计算，计算量小。与参数功率谱估计方法相比，周期图不需要先验阶次选择步骤，易于实现。此外，当数据受到噪声污染时，周期图法已被证明比参数估计方法更稳健。</p><p>PSDA缺点：单通道易受噪声干扰。</p><p>因此，使用信道协方差信息的典型相关分析，用以提高信噪比（signal-to-noise ratio，SNR）。</p><h2 id="3-研究方法"><a href="#3-研究方法" class="headerlink" title="3. 研究方法"></a>3. 研究方法</h2><p>CCA是一种多变量统计方法，当有两组数据时使用，这两组数据可能有一些潜在的相关性。CCA将普通相关性扩展到两组变量[6]、[7]。首先，CCA为两个集合找到一对线性组合，称为规范变量，使得两个规范变量之间的相关性最大化。然后，它找到第二对，它与第一对规范变量不相关，但具有次高的相关性。</p><p>每个键以一定频率闪烁，构成频率编码矩阵（frequency-coded matrix），当受试者凝视其中一个键时，相应的SSVEP就会出现。</p><h2 id="4-评估，实验"><a href="#4-评估，实验" class="headerlink" title="4. 评估，实验"></a>4. 评估，实验</h2><p>实现方法：被试通过注视LED面板中特定频率闪烁的LED来执行操作指令，在受试者的脑电图中会诱发和观察到与闪烁LED的基频相似的SSVEP。</p><p>与PSDA进行对比，采用256点快速傅里叶变换。</p><p>采用交叉验证设计对两种方法进行评价。将样本数据集分为用于信道选择的训练集和用于测试频率识别性能的测试集。对于每个系统，从所有刺激频率中随机截取的30秒长的信号构成训练集。其余30秒长的信号组成了测试集。从这些测试集中随机选择900个长度为s的信号段(对于单个频率为100个)，并执行频率识别。分析重复了10次。研究了对识别率的影响。准确率定义为正确判断刺激频率的样本(信号段)的百分比。设为识别算法确定的频率，为样本的真实刺激频率。那么精确度可以表示为</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416110041.png" alt="image-20210414102959251"></p><p>采样率900</p><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416110049.png" alt="image-20210414103438716"></p><p>使用这两种方法对不同受试者的时间窗长度的准确度和标准偏差。实线和虚线分别代表CCA和PSDA方法的结果。结果表明，在不同的时间窗长度下，CCA方法对大多数受试者(受试者NTS除外)的识别率均高于PSDA方法。</p><p><img src="https://gitee.com/zyxaxx/warehouse/raw/master/img/20210416110104.png" alt="image-20210414103513265"></p><p>受试者的平均准确率和配对t检验结果。黑条和白条分别代表CCA方法和PSDA方法的平均值。配对t检验的意义用星号表示，其中*代表p&lt;0：05，**代表p&lt;0：01。结果表明，在大多数时间窗口长度上，CCA方法明显优于PSDA方法。</p><h2 id="6-笔记"><a href="#6-笔记" class="headerlink" title="6. 笔记"></a>6. 笔记</h2><p>CCA精度不算所有算法中最高的，但是计算速度较快，易于理解，可以用于在线分析。</p><p>本论文只分析了的最大CCA系数，因为它传递的信息最多。这在理想条件下是正确的。然而，真实的脑电信号可能会受到噪声的污染，或者可能具有不连续的相变。这些因素导致信息传播到不止一个系数上。并且对于人类视觉系统来说，本文假设为线性，实际可能为非线性。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
    <summary type="html">基于典型相关分析的基于SSVEP的BCI频率识别</summary>
    
    
    
    <category term="论文" scheme="http://example.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
    <category term="CCA" scheme="http://example.com/tags/CCA/"/>
    
    <category term="SSVEP" scheme="http://example.com/tags/SSVEP/"/>
    
  </entry>
  
  <entry>
    <title>CCA算法原理</title>
    <link href="http://example.com/2021/04/14/CCA%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2021/04/14/CCA%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-14T01:53:29.457Z</published>
    <updated>2021-04-14T01:55:01.209Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_42374697/article/details/105964577?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-1&spm=1001.2101.3001.4242">CCA算法</a></p><p><a href="https://gaokao.hujiang.com/gy/shuxue/p242121/">协方差</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/qq_42374697/article/details/105964577?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandin</summary>
      
    
    
    
    <category term="算法" scheme="http://example.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python小甲鱼第25课字典</title>
    <link href="http://example.com/2021/04/13/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC25%E8%AF%BE%E5%AD%97%E5%85%B8%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E5%AD%97%E5%85%B8%E7%9A%84%E7%89%B9%E6%80%A7%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E9%80%9A%E8%AE%AF%E5%BD%95%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2021/04/13/Python%E5%B0%8F%E7%94%B2%E9%B1%BC/%E7%AC%AC25%E8%AF%BE%E5%AD%97%E5%85%B8%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%E5%AD%97%E5%85%B8%E7%9A%84%E7%89%B9%E6%80%A7%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E9%80%9A%E8%AE%AF%E5%BD%95%E7%A8%8B%E5%BA%8F/</id>
    <published>2021-04-13T02:20:43.208Z</published>
    <updated>2021-04-22T01:48:43.631Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 欢迎进入通讯录程序 ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 1:查询联系人资料 ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 2:插入新的联系人 ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 3:删除已有的联系人 ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 4:查看所有通讯录 ---|&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;|--- 5:退出通讯录程序 ---|&#x27;</span>)</span><br><span class="line"></span><br><span class="line">tongxunlu=<span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    shuru=<span class="built_in">input</span>(<span class="string">&quot;\n请输入相关数字编号：&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> shuru.isdigit():</span><br><span class="line">        shuru=<span class="built_in">int</span>(shuru)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;抱歉，您的输入有误&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> shuru== <span class="number">1</span>:</span><br><span class="line">        name=<span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名:&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> tongxunlu:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;姓名\t手机号码&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(name+<span class="string">&#x27;\t&#x27;</span>+tongxunlu[name])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;输入有误&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> shuru==<span class="number">2</span>:</span><br><span class="line">        name=<span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> tongxunlu:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的姓名在通讯录中已存在--&gt;&gt;&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>((name+<span class="string">&#x27;:&#x27;</span>+tongxunlu[name]))</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">input</span>(<span class="string">&#x27;是否需要修改用户资料(YES/NO):&#x27;</span>).upper()==<span class="string">&#x27;YES&#x27;</span>:</span><br><span class="line">                tongxunlu[name]=<span class="built_in">input</span>(<span class="string">&#x27;请输入用户联系电话：&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            tongxunlu[name]=<span class="built_in">input</span>(<span class="string">&#x27;请输入用户联系电话：&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;添加联系人&#x27;</span>+name+<span class="string">&#x27;成功&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> shuru==<span class="number">3</span>:</span><br><span class="line">        name=<span class="built_in">input</span>(<span class="string">&#x27;请输入联系人姓名：&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">in</span> tongxunlu:</span><br><span class="line">            <span class="keyword">del</span>(tongxunlu[name])</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;您输入的联系人不存在&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> shuru==<span class="number">4</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;姓名\t手机号码&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> tongxunlu:</span><br><span class="line">            <span class="built_in">print</span>(tongxunlu)</span><br><span class="line">    <span class="keyword">if</span> shuru==<span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">——利用字典的特性编写一个通讯录程序</summary>
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://example.com/2021/04/11/test/"/>
    <id>http://example.com/2021/04/11/test/</id>
    <published>2021-04-11T04:30:26.682Z</published>
    <updated>2021-05-12T01:25:54.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0-总结"><a href="#0-总结" class="headerlink" title="0. 总结"></a>0. 总结</h2><p>写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己的语言描述。忌讳直接Ctrl + c原文。</p><h2 id="1-研究目标"><a href="#1-研究目标" class="headerlink" title="1. 研究目标"></a>1. 研究目标</h2><h2 id="2-研究背景及问题陈述"><a href="#2-研究背景及问题陈述" class="headerlink" title="2. 研究背景及问题陈述"></a>2. 研究背景及问题陈述</h2><h2 id="3-研究方法"><a href="#3-研究方法" class="headerlink" title="3. 研究方法"></a>3. 研究方法</h2><h2 id="4-评估，实验"><a href="#4-评估，实验" class="headerlink" title="4. 评估，实验"></a>4. 评估，实验</h2><h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5. 结论"></a>5. 结论</h2><h2 id="6-笔记"><a href="#6-笔记" class="headerlink" title="6. 笔记"></a>6. 笔记</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0-总结&quot;&gt;&lt;a href=&quot;#0-总结&quot; class=&quot;headerlink&quot; title=&quot;0. 总结&quot;&gt;&lt;/a&gt;0. 总结&lt;/h2&gt;&lt;p&gt;写完笔记之后最后填，概述文章的内容，以后查阅笔记的时候先看这一段。注：写文章summary切记需要通过自己的思考，用自己</summary>
      
    
    
    
    <category term="论文" scheme="http://example.com/categories/%E8%AE%BA%E6%96%87/"/>
    
    
  </entry>
  
</feed>
